; AutoGUI v2.2.6a
; Tested on AHK v1.1.28.00 Unicode 32/64-bit, Windows XP/7/10

; Script options
#NoEnv
#SingleInstance Off
#KeyHistory 0
SetBatchLines -1
DetectHiddenWindows On
SetWinDelay -1
SetControlDelay -1
SetWorkingDir %A_ScriptDir%
ListLines Off

Files := [] ; Store filenames passed as parameters (from Shell context menu or shortcut)
Loop %0% {
    Loop Files, % %A_Index%
        Files.Push(A_LoopFileLongPath)
}
Param = %1%
0 := 0

If (Files.Length() && (hPrevInstance := WinExist("AutoGUI v")) && Param != "/new") {
    Loop 10 {
        If (SendData(Files[1], hPrevInstance) == True) {
            Break
        } Else {
            Sleep 100
        }
    }
    WinActivate ahk_id %hPrevInstance%
    ExitApp
}

; Libraries
#Include %A_ScriptDir%\Lib\AuxLib.ahk
#Include %A_ScriptDir%\Lib\GuiTabEx.ahk
#Include %A_ScriptDir%\Lib\Toolbar.ahk
#Include %A_ScriptDir%\Lib\Scintilla.ahk
#Include %A_ScriptDir%\Lib\AutoXYWH.ahk
#Include %A_ScriptDir%\Include\Keywords.ahk

; Global variables
Global Version := "2.2.6a"
, AppName := "AutoGUI"
, hAutoWnd
, hChildWnd := 0
, Child := 1
, hSelWnd := 0
, hMainToolbar
, hGUIToolbar
, hChildToolbar := 0
, TB_CHECKBUTTON := 0x402
, hFindReplaceDlg := 0
, SearchString := ""
, g_MatchCase
, g_WholeWord
, g_RegExFind
, g_Backslash
, hFindCbx
, hReplaceCbx
, hFontDlg
, hCloneDlg
, hToolbarEditor := 0
, m := New MenuBar
, hMenuEditor := 0
, hAddMenuItemDlg := 0
, g_Script
, g := New GuiClass
, g_X := 0
, g_Y := 0
, g_Control := 0
, g_TabIndex := 1
, OpenDir
, SaveDir
, CodePage
, Indent
, g_TabSize
, g_Insert := True
, DesignMode
, ShowGrid
, SnapToGrid
, GridSize
, g_WordWrap
, g_SyntaxHighlighting
, g_LineNumbers
, g_AutoBrackets
, SysTrayIcon
, hToolbox
, hTab := 0
, TabEx
, Sci := []
, SciLexer := A_ScriptDir . (A_PtrSize == 8 ? "\SciLexer-x64.dll" : "\SciLexer-x86.dll")
, g_SciFontName
, g_SciFontSize
, RecentFiles := []
, hPropWnd := 0
, hCbxClassNN := 0
, g_WinColor
, hOptionsBtn
, IniFile
, IconLib := A_ScriptDir . "\Icons\AutoGUI.icl"
, hBitmapTile
, hCursorCross
, hCursorDragMove
, g_Cross := False
, g_Parameters := ""
, g_BackupOnSave
, g_BackupDir
, g_BackupDays
, g_AutoSaveInterval
, g_AutoSaveInLoco
, g_AutoSaveInBkpDir
, CRLF := "`r`n"
, g_Signature := "; Generated by " . AppName . " " . Version . CRLF
, g_Delimiter := "; Do not edit above this line"
, NoResizers
, Resizers := []
, hResizer1
, hResizer2
, hResizer3
, hResizer4
, hResizer5
, hResizer6
, hResizer7
, hResizer8
, hGrippedWnd
, ResizerSize := 6
, ResizerColor
, ResizerBrush
, Cursors := {}
, g_Adding := False
, NoReturn := False
, g_NT6orLater := DllCall("GetVersion") & 0xFF > 5
, g_IconPath := "shell32.dll"
, g_PicturePath := A_MyDocuments
, g_GuiTab := 0
, g_GuiSB := False
, g_AltAhkPath
, g_ShowWhiteSpaces := False
, g_AutoCList
, g_AutoCEnabled
, g_AutoCMinLength
, g_AutoCMaxItems
, g_AutoCXMLObj
, g_Calltips
, g_CalltipParams
, g_CalltipParamsIndex := 1
, g_HighlightActiveLine
, g_HelpMenuXMLObj
, g_IndentGuides
, g_HighlightIdenticalText
, g_CheckTimestamp
, g_CodeFolding
, g_IndentWithSpaces
, g_AutoIndent
, g_TabCounter := 1
, g_IniTools
, g_AhkPath3264
, g_LButtonDown := 0
, g_SessionsDir
, g_LoadLastSession
, g_RememberSession
, g_DbgPort
, g_DbgStatus := 0
, g_DbgSession
, g_DbgSocket
, g_DbgStack
, g_DbgLocalVariables
, g_DbgGlobalVariables
, g_Breakpoints := []
, g_SymbolMargin
, g_InitialX
, g_InitialY
, g_InitialW
, g_InitialH
, g_ToolbarH := 32
, g_hStatusBar
, g_StatusBarH
, g_TabBarPos
, g_TabBarStyle
, g_SplitterW := 4
, g_ErrorMarker := False
, g_MouseCapture := 0
, g_AskToSaveOnExit
, g_MarkerBookmark := 0
, g_MarkerBreakpoint := 1
, g_MarkerDebugStep := 2
, g_MarkerError := 3
, hVarListWnd := 0
, g_ReloadVarListOnEveryStep := 1
, g_ShowIndexedVariables := 1
, g_ShowObjectMembers := 1
, g_HideReservedClassMembers := 1
, g_DbgCaptureStderr := True
, g_AttachDebugger := False
, g_HelpFile
, g_ShowAllFonts
, g_FontList
, g_hHiddenEdit
, g_DarkTheme

;Menu Tray, UseErrorLevel ; Suppress menu warnings
Menu Tray, Icon, %IconLib%

If (FileExist(A_AppData . "\AutoGUI\AutoGUI.ini")) {
    IniFile := A_AppData . "\AutoGUI\AutoGUI.ini"
} Else {
    IniFile := A_ScriptDir . "\AutoGUI.ini"
}

LoadSettings()

Gui Auto: New, LabelAuto hWndhAutoWnd Resize MinSize680 -DPIScale, %AppName% v%Version%
Gui Auto: Default

AddMenu("AutoFileMenu", "&New File`tCtrl+N", "NewTab", IconLib, 7)
Menu AutoEditMenu, Add, &Undo`tCtrl+Z, Undo
AddMenu("AutoSearchMenu", "&Find...`tCtrl+F", "ShowSearchDialog", IconLib, 21)
Menu AutoConvertMenu, Add, &UPPERCASE`tCtrl+Shift+U, Uppercase
Menu AutoViewMenu, Add, &Design Mode, SwitchToDesignMode, Radio
AddMenu("AutoControlMenu", "Change Text...", "ChangeText", IconLib, 14)
AddMenu("AutoLayoutMenu", "Align &Lefts", "AlignLefts", IconLib, 26)
AddMenu("AutoWindowMenu", "Change &Title...", "ChangeTitle", IconLib, 37)
If (A_PtrSize == 8) {
    AddMenu("AutoRunMenu", "Run with AHK 64-&bit`tF9", "RunScript", IconLib, 93)
    AddMenu("AutoRunMenu", "Run with AHK 32-bit`tShift+F9", "RunScript", IconLib, 92)
} Else {
    AddMenu("AutoRunMenu", "Run with AHK 32-bit`tF9", "RunScript", IconLib, 92)
    AddMenu("AutoRunMenu", "Run with AHK 64-&bit`tShift+F9", "RunScript", IconLib, 93)
}
Menu AutoOptionsMenu, Add, Show &Grid, ToggleGrid
AddMenu("AutoToolsMenu", "&Window Cloning Tool", "ShowCloneDialog", "Icons\WCT.ico")
AddMenu("AutoHelpMenu", "AutoHotkey &Help File`tF1", "HelpMenuHandler", IconLib, 78)

Menu AutoMenuBar, Add, &File, :AutoFileMenu
Menu AutoMenuBar, Add, &Edit, :AutoEditMenu
Menu AutoMenubar, Add, &Search, :AutoSearchMenu
Menu AutoMenuBar, Add, Co&nvert, :AutoConvertMenu
Menu AutoMenuBar, Add, &View, :AutoViewMenu
Menu AutoMenuBar, Add, &Control, :AutoControlMenu
Menu AutoMenuBar, Add, &Layout, :AutoLayoutMenu
Menu AutoMenuBar, Add, &Window, :AutoWindowMenu
Menu AutoMenuBar, Add, &Run%A_Space%, :AutoRunMenu
Menu AutoMenuBar, Add, &Options, :AutoOptionsMenu
Menu AutoMenuBar, Add, &Tools, :AutoToolsMenu
Menu AutoMenuBar, Add, &Help, :AutoHelpMenu
Gui Menu, AutoMenuBar

IniRead g_InitialX, %IniFile%, Auto, x
IniRead g_InitialY, %IniFile%, Auto, y
IniRead g_InitialW, %IniFile%, Auto, w, 952
IniRead g_InitialH, %IniFile%, Auto, h, 611
IniRead ShowState, %IniFile%, Auto, Show, 1

If (FileExist(IniFile)) {
    SetWindowPlacement(hAutoWnd, g_InitialX, g_InitialY, g_InitialW, g_InitialH, 0)
} Else {
    Gui Show, w%g_InitialW% h%g_InitialH% Hide
}

Gui Font, s9, Segoe UI
Gui Add, StatusBar, hWndg_hStatusBar
GuiControlGet g_StatusBar, Pos, %g_hStatusBar%

If (DesignMode) {
    CreateToolbox(0)
}

Gui Add, Edit, hWndg_hHiddenEdit x0 y0 w0 h0

GoSub CreateTabControl

; Initial instance of Scintilla
Sci[1] := New Scintilla
Sci_GetIdealSize(SciX, SciY, SciW, SciH)
Sci[1].Add(hAutoWnd, SciX, SciY, SciW, SciH, SciLexer, 0x50010000, 0x200)
Sci_Config(1)

CreateEditorToolbar()
CreateDesignToolbar()

ShowWindow(hAutoWnd, ShowState)
WinActivate ahk_id %hAutoWnd%

ApplyToolbarSettings()
SetStatusBar()
#Include %A_ScriptDir%\Include\Menu.ahk
ApplyMenuSettings()

Sci[1].GrabFocus()

If (!DesignMode) {
    CreateToolbox(1)
}

; Dispatch messages
OnMessage(0x136, "OnWM_CTLCOLORDLG")
OnMessage(0x3,   "OnWM_MOVE")
OnMessage(0x201, "OnWM_LBUTTONDOWN")
OnMessage(0x204, "OnWM_RBUTTONDOWN")
OnMessage(0x207, "OnWM_MBUTTONDOWN")
OnMessage(0x200, "OnWM_MOUSEMOVE")
OnMessage(0x100, "OnWM_KEYDOWN")
OnMessage(0x101, "OnWM_KEYUP")
OnMessage(0x104, "OnWM_SYSKEYDOWN")
OnMessage(0x203, "OnWM_LBUTTONDBLCLK")
OnMessage(0x232, "OnWM_EXITSIZEMOVE")
OnMessage(0xA0,  "OnWM_NCMOUSEMOVE")
OnMessage(0x138, "OnWM_CTLCOLORSTATIC")
OnMessage(0x20,  "OnWM_SETCURSOR")
OnMessage(0x202, "OnWM_LBUTTONUP")
OnMessage(0x4A,  "OnWM_COPYDATA")
OnMessage(0x1C,  "OnWM_ACTIVATEAPP")
OnMessage(0x211, "OnWM_ENTERMENULOOP")
OnMessage(0x116, "OnWM_INITMENU")
OnMessage(10000, "CustomMessage")
OnMessage(0x16,  "SaveSettings") ; WM_ENDSESSION

DllCall("UxTheme.dll\SetWindowTheme", "Ptr", hToolbox, "WStr", "Explorer", "Ptr", 0)

LoadRecentFiles()
SetSessionsDir()

If (Files.Length()) {
    Open(Files)
} Else If (g_LoadLastSession) {
    LoadLastSession()
}

hBitmapTile := LoadImage(A_ScriptDir . "\Icons\8x8.bmp", GridSize, GridSize, 0)
hCursorCross := DllCall("LoadCursor", "UInt", 0, "UInt", 32515)
hCursorDragMove := LoadImage(A_ScriptDir . "\Icons\DragMove.cur", 32, 32, 2)

#Include %A_ScriptDir%\Include\Controls.ahk

g_Script := {0:0
,   NoEnv: True
,   Warn: ""
,   SingleInstance: "Force"
,   NoTrayIcon: False
,   WorkingDir: "%A_ScriptDir%"
,   SendMode: ""
,   NoSleep: False
,   ListLinesOff: False
,   Persistent: False
,   IgnoreMenuErrors: False}

SplitPath A_AhkPath,, AhkDir
g_AhkPath3264 := AhkDir . (A_PtrSize == 4 ? "\AutoHotkeyU64.exe" : "\AutoHotkeyU32.exe")

Global g_ThemeFix := DllCall("UxTheme.dll\IsThemeActive") ? "" : "-Theme" ; Temp

StartAutoSave()

LoadToolsMenu()
LoadHelpMenu()

LoadAutoComplete(A_ScriptDir . "\Include\AutoHotkey.xml")

DeleteOldBackups()

Return ; End of the auto-execute section.

CreateToolbox(Hidden := 0) {
    GetClientSize(hAutoWnd, WindowW, WindowH)
    ToolboxH := WindowH - g_ToolbarH - g_StatusBarH
    ToolboxOptions := "AltSubmit -Multi +LV0x10000 Background0xFEFEFE"
    Gui Add, ListView
    , hWndhToolbox gToolboxHandler x0 y%g_ToolbarH% w160 h%ToolboxH% %ToolboxOptions% Hidden%Hidden%, Control Types

    ; Toolbox ImageList
    Global TboxIL := IL_Create(32)
    IL_Add(TboxIL, IconLib, 47) ; Button
    IL_Add(TboxIL, IconLib, 48) ; CheckBox
    IL_Add(TboxIL, IconLib, 49) ; ComboBox
    IL_Add(TboxIL, IconLib, 51) ; DateTime
    IL_Add(TboxIL, IconLib, 50) ; DropDownList
    IL_Add(TboxIL, IconLib, 52) ; Edit
    IL_Add(TboxIL, IconLib, 53) ; GroupBox
    IL_Add(TboxIL, IconLib, 54) ; Hotkey
    IL_Add(TboxIL, IconLib, 55) ; Link
    IL_Add(TboxIL, IconLib, 56) ; ListBox
    IL_Add(TboxIL, IconLib, 57) ; ListView
    IL_Add(TboxIL, IconLib, 58) ; Menu
    IL_Add(TboxIL, IconLib, 59) ; MonthCal
    IL_Add(TboxIL, IconLib, 60) ; Picture
    IL_Add(TboxIL, IconLib, 61) ; Progress
    IL_Add(TboxIL, IconLib, 62) ; Radio
    IL_Add(TboxIL, IconLib, 63) ; Separator
    IL_Add(TboxIL, IconLib, 64) ; Slider
    IL_Add(TboxIL, IconLib, 65) ; StatusBar
    IL_Add(TboxIL, IconLib, 66) ; Tab
    IL_Add(TboxIL, IconLib, 67) ; Text
    IL_Add(TboxIL, IconLib, 69) ; Toolbar
    IL_Add(TboxIL, IconLib, 68) ; TreeView
    IL_Add(TboxIL, IconLib, 70) ; UpDown
    IL_Add(TboxIL, IconLib, 46) ; ActiveX
    IL_Add(TboxIL, IconLib, 71) ; Custom
    IL_Add(TboxIL, IconLib, 45) ; Command Link
    LV_SetImageList(TboxIL, 1)

    ; Toolbox items
    LV_Add("Icon1", "Button")
    LV_Add("Icon2", "CheckBox")
    LV_Add("Icon3", "ComboBox")
    LV_Add("Icon4", "Date Time Picker")
    LV_Add("Icon5", "DropDownList")
    LV_Add("Icon6", "Edit Box")
    LV_Add("Icon7", "GroupBox")
    LV_Add("Icon8", "Hotkey Box")
    LV_Add("Icon9", "Link")
    LV_Add("Icon10", "ListBox")
    LV_Add("Icon11", "ListView")
    LV_Add("Icon12", "Menu Bar")
    LV_Add("Icon13", "Month Calendar")
    LV_Add("Icon14", "Picture")
    LV_Add("Icon15", "Progress Bar")
    LV_Add("Icon16", "Radio Button")
    LV_Add("Icon17", "Separator")
    LV_Add("Icon18", "Slider")
    LV_Add("Icon19", "Status Bar")
    LV_Add("Icon20", "Tab")
    LV_Add("Icon21", "Text")
    LV_Add("Icon22", "Toolbar")
    LV_Add("Icon23", "TreeView")
    LV_Add("Icon24", "UpDown")
    LV_Add("Icon25", "ActiveX")
    LV_Add("Icon26", "Custom Class")
    If (g_NT6orLater) {
        LV_Add("Icon27", "Command Link")
    }
}

ToolboxHandler:
    If (A_GuiEvent == "Normal") {
        g_Cross := False

        If !(A_EventInfo) {
            Return
        }

        LV_GetText(Type, A_EventInfo)

        If (Type == "Menu Bar") {
            Gosub ShowMenuEditor
            Return
        }

        If (Type == "Toolbar") {
            Gosub ShowToolbarEditor
            Return
        }

        If (WinExist("ahk_id " . hChildWnd)) {
            ShowChildWindow(4) ; SW_SHOWNOACTIVATE
            TabEx.SetSel(g_GuiTab)
        } Else {
            GoSub NewGUI
        }

        If (Type == "Status Bar") {
            AddStatusBar()
            Return
        }

        If (Type == "ActiveX") {
            ShowActiveXDialog()
            Return
        }

        If (Type == "Custom Class") {
            ShowCustomClassDialog()
            Return
        }

        g_Cross := True
    }
Return

TabHandler:
    TabIndex := TabEx.GetSel()

    ShowWindow(Sci[TabIndex].hWnd)
    Loop % Sci.MaxIndex() {
        If (A_Index != TabIndex) {
            ShowWindow(Sci[A_Index].hWnd, 0)
        }
    }

    Sci[TabIndex].GrabFocus()

    If (TabIndex != g_GuiTab) {
        ShowChildWindow(0)
    }

    WrapMode := Sci[TabIndex].GetWrapMode()
    SendMessage TB_CHECKBUTTON, 2160, WrapMode,, ahk_id %hMainToolbar%
    Menu AutoViewMenu, % WrapMode ? "Check" : "Uncheck", &Wrap Long Lines

    ReadOnly := Sci[TabIndex].GetReadOnly()
    SendMessage TB_CHECKBUTTON, 2170, ReadOnly,, ahk_id %hMainToolbar%
    Menu AutoEditMenu, % ReadOnly ? "Check" : "Uncheck", Set as &Read-Only

    If (!g_GuiSB) {
        UpdateStatusBar()
    }

    SetWindowTitle(Sci[TabIndex].FullName)

    CheckModified()
Return

CreateEditorToolbar() {
    EditorTBIL := IL_Create(30)
    IL_Add(EditorTBIL, IconLib, 7)   ; New Tab
    IL_Add(EditorTBIL, IconLib, 9)   ; Open
    IL_Add(EditorTBIL, IconLib, 10)  ; Save
    IL_Add(EditorTBIL, IconLib, 125) ; Save All
    IL_Add(EditorTBIL, IconLib, 126) ; Design Mode
    IL_Add(EditorTBIL, IconLib, 6)   ; New GUI
    IL_Add(EditorTBIL, IconLib, 38)  ; Show/Hide Preview Window
    IL_Add(EditorTBIL, IconLib, 15)  ; Cut
    IL_Add(EditorTBIL, IconLib, 16)  ; Copy
    IL_Add(EditorTBIL, IconLib, 17)  ; Paste
    IL_Add(EditorTBIL, IconLib, 81)  ; Undo
    IL_Add(EditorTBIL, IconLib, 82)  ; Redo
    IL_Add(EditorTBIL, IconLib, 21)  ; Find
    IL_Add(EditorTBIL, IconLib, 22)  ; Replace
    IL_Add(EditorTBIL, IconLib, 23)  ; Find in Files
    IL_Add(EditorTBIL, IconLib, 83)  ; Fold Margin
    IL_Add(EditorTBIL, IconLib, 85)  ; Word Wrap
    IL_Add(EditorTBIL, IconLib, 87)  ; Read Only
    IL_Add(EditorTBIL, IconLib, 86)  ; Syntax Highlighting
    IL_Add(EditorTBIL, IconLib, 84)  ; Show White Spaces
    IL_Add(EditorTBIL, IconLib, 104) ; Debug Run
    IL_Add(EditorTBIL, IconLib, 106) ; Debug Stop
    IL_Add(EditorTBIL, IconLib, 109) ; Step Into
    IL_Add(EditorTBIL, IconLib, 110) ; Step Over
    IL_Add(EditorTBIL, IconLib, 111) ; Step Out
    IL_Add(EditorTBIL, IconLib, 115) ; Inspect Variables
    IL_Add(EditorTBIL, IconLib, 12)  ; Execute
    IL_Add(EditorTBIL, IconLib, 78)  ; Help

    EditorTBBtns = 
    (LTrim
        New File
        Open
        Save
        Save All
        -
        Design Mode
        New GUI
        Show/Hide Preview Window
        -
        Cut
        Copy
        Paste
        -
        Undo
        Redo
        -
        Find
        Replace
        Find in Files
        -
        Fold Margin,,,, 2150
        Word Wrap,,,, 2160
        Read Only,,,, 2170
        Syntax Highlighting,,,, 2180
        Show White Spaces,,,, 2190
        -
        Start Debugging / Continue,,,, 2500
        Stop Debugging,, HIDDEN,, 2501
        Step Into,, HIDDEN,, 2502
        Step Over,, HIDDEN,, 2503
        Step Out,, HIDDEN,, 2504
        Inspect Variables,, HIDDEN,, 2505
        -
        Execute,,, SHOWTEXT
        -
        Help
    )

    Extra := (g_TabBarPos == 1) ? "+E0x200" : ""
    Extra .= (DesignMode) ? " Hidden" : ""

    hMainToolbar := ToolbarCreate("OnMainToolbar", EditorTBBtns, EditorTBIL, "FLAT LIST TOOLTIPS", Extra)
    SendMessage 0x41F, 0, 0x00180018,, ahk_id %hMainToolbar% ; TB_SETBUTTONSIZE
}

OnMainToolbar(hWnd, Event, Text, Pos, Id) {
    If (Event != "Click") {
        Return
    }

    If (Text == "New GUI") {
        GoSub NewGUI
    } Else If (Text == "New File") {
        NewTab()
    } Else If (Text == "Open") {
        Open()
    } Else If (Text == "Save") {
        Save(TabEx.GetSel())
    } Else If (Text == "Save All") {
        GoSub SaveAll

    } Else If (Text == "Undo") {
        Undo()
    } Else If (Text == "Redo") {
        Redo()

    } Else If (Text == "Design Mode") {
        GoSub SwitchToDesignMode
    } Else If (Text == "Show/Hide Preview Window") {
        ShowChildWindow()

    } Else If (Text == "Cut") {
        Cut()
    } Else If (Text == "Copy") {
        Copy()
    } Else If (Text == "Paste") {
        Paste()

    } Else If (Text == "Find") {
        GoSub ShowSearchDialog
    } Else If (Text == "Replace") {
        GoSub ShowReplaceDialog
    } Else If (Text == "Find in Files") {
        FindInFiles()

    } Else If (Text == "Fold Margin") {
        ToggleCodeFolding()
    } Else If (Text == "Word Wrap") {
        ToggleWordWrap()
    } Else If (Text == "Read Only") {
        ToggleReadOnly()
    } Else If (Text == "Syntax Highlighting") {
        ToggleSyntaxHighlighting()
    } Else If (Text == "Show White Spaces") {
        ToggleWhiteSpaces()

    } Else If (Id == 2500) {
        DebugRun()
    } Else If (Text == "Step Into") {
        GoSub StepInto
    } Else If (Text == "Step Over") {
        GoSub StepOver
    } Else If (Text == "Step Out") {
        GoSub StepOut
    } Else If (Text == "Stop Debugging") {
        GoSub DebugStop
    } Else If (Text == "Inspect Variables") {
        GoSub ShowVarList

    } Else If (Text == "Execute") {
        RunScript()

    } Else If (Text == "Help") {
        OpenHelpFile(GetSelectedText())
    }
}

; Design Mode toolbar
CreateDesignToolbar() {
    TbarIL := IL_Create(32)
    IL_Add(TbarIL, IconLib, 7)   ; New File
    IL_Add(TbarIL, IconLib, 9)   ; Open
    IL_Add(TbarIL, IconLib, 10)  ; Save
    IL_Add(TbarIL, IconLib, 125) ; Save All
    IL_Add(TbarIL, IconLib, 126) ; Design Mode
    IL_Add(TbarIL, IconLib, 6)   ; New GUI
    IL_Add(TbarIL, IconLib, 38)  ; Show/Hide Preview Window
    IL_Add(TbarIL, IconLib, 72)  ; Show Grid
    IL_Add(TbarIL, IconLib, 73)  ; Snap to Grid
    IL_Add(TbarIL, IconLib, 26)  ; Align Lefts
    IL_Add(TbarIL, IconLib, 27)  ; Align Rights
    IL_Add(TbarIL, IconLib, 28)  ; Align Tops
    IL_Add(TbarIL, IconLib, 29)  ; Align Bottoms
    IL_Add(TbarIL, IconLib, 30)  ; Center Horizontally
    IL_Add(TbarIL, IconLib, 31)  ; Center Vertically
    IL_Add(TbarIL, IconLib, 33)  ; Horizontally Space
    IL_Add(TbarIL, IconLib, 32)  ; Vertically Space
    IL_Add(TbarIL, IconLib, 34)  ; Make Same Width
    IL_Add(TbarIL, IconLib, 35)  ; Make Same Height
    IL_Add(TbarIL, IconLib, 36)  ; Make Same Size
    IL_Add(TbarIL, "Icons\WCT.ico") ; Window Cloning Tool
    IL_Add(TbarIL, IconLib, 12)  ; Execute
    IL_Add(TbarIL, IconLib, 25)  ; Properties

    TbarButtons = 
        (LTrim
            New File
            Open
            Save
            Save All
            -
            Design Mode,,,, 1060
            New GUI
            Show/Hide Preview Window,,,, 1070
            -
            Show Grid,,,, 1080
            Snap to Grid,,,, 1090
            -
            Align Lefts
            Align Rights
            Align Tops
            Align Bottoms
            -
            Center Horizontally
            Center Vertically
            -
            Horizontally Space
            Vertically Space
            -
            Make Same Width
            Make Same Height
            Make Same Size
            -
            Window Cloning Tool
            -
            Execute,,, SHOWTEXT
            -
            Properties
        )

    Extra := (g_TabBarPos == 1) ? "+E0x200" : ""
    Extra .= (DesignMode) ? "" : " Hidden"

    hGUIToolbar := ToolbarCreate("OnGUIToolbar", TbarButtons, TbarIL, "FLAT LIST TOOLTIPS", Extra)
    SendMessage 0x41F, 0, 0x00180018,, ahk_id %hGUIToolbar% ; TB_SETBUTTONSIZE
}

OnGUIToolbar(hWnd, Event, Text, Pos, Id) {
    If (Event == "Hot") {
        If (GetActiveWindow() != hAutoWnd && Text != "Execute") {
            Tooltip %Text%
            SetTimer RemoveToolTip, 3000
        }
        Return
    }

    If (Event != "Click") {
        Return
    }

    If (Text == "New GUI") {
        GoSub NewGUI
    } Else If (Text == "New File") {
        NewTab()
    } Else If (Text == "Open") {
        Open()
    } Else If (Text == "Save") {
        Save(TabEx.GetSel())
    } Else If (Text == "Save All") {
        GoSub SaveAll

    } Else If (Text == "Design Mode") {
        GoSub SwitchToEditorMode
    } Else If (Text == "Show/Hide Preview Window") {
        ShowChildWindow()

    } Else If (Text == "Show Grid") {
        GoSub ToggleGrid
    } Else If (Text == "Snap to Grid") {
        GoSub ToggleSnapToGrid

    } Else If (Text == "Align Lefts") {
        AlignLefts()
    } Else If (Text == "Align Rights") {
        AlignRights()
    } Else If (Text == "Align Tops") {
        AlignTops()
    } Else If (Text == "Align Bottoms") {
        AlignBottoms()

    } Else If (Text == "Center Horizontally") {
        CenterHorizontally()
    } Else If (Text == "Center Vertically") {
        CenterVertically()

    } Else If (Text == "Horizontally Space") {
        HorizontallySpace()
    } Else If (Text == "Vertically Space") {
        VerticallySpace()

    } Else If (Text == "Make Same Width") {
        MakeSame("w")
    } Else If (Text == "Make Same Height") {
        MakeSame("h")
    } Else If (Text == "Make Same Size") {
        MakeSame("wh")

    } Else If (Text == "Window Cloning Tool") {
        GoSub ShowCloneDialog

    } Else If (Text == "Execute") {
        RunScript()

    } Else If (Text == "Properties") {
        GoSub ShowProperties
    }

    Tooltip
}

RemoveToolTip:
    SetTimer RemoveToolTip, Off
    ToolTip
Return

OnWM_NCMOUSEMOVE() {
    Tooltip
}

SetStatusBar() {
    Gui Auto: Default
    If (g_GuiSB) {
        SB_SetParts()
        SB_SetParts(162, 170, 170, 170)

        SB_SetIcon(IconLib, 75, 2) ; Position
        SB_SetIcon(IconLib, 76, 3) ; Size
        SB_SetIcon(IconLib, 77, 4) ; Cursor

        SB_SetText("Generated Code", 1)
    } Else {
        SB_SetParts()
        SB_SetParts(162, 200, 200, 62) ; Line:Pos, Status, Overtype mode, Save encoding

        If (g_Insert) {
            SB_SetText("    Insert", 4)
        } Else {
            SB_SetText("Overstrike", 4)
        }

        SB_SetText(CodePage, 5)

        ;SB_SetText("", 1)
        UpdateStatusBar()
    }
}

NewGUI:
    If (g_GuiTab) {
        Gui Auto: +OwnDialogs
        MsgBox 0x31, New GUI, Only one GUI can be created at a time. Proceed?
        IfMsgBox Cancel, {
            Return
        }

        ; Restore the icon of the previous GUI tab
        If (Sci[g_GuiTab].FileName != "") {
            TabEx.SetIcon(g_GuiTab, 2)
        } Else {
            TabEx.SetIcon(g_GuiTab, 1)
        }
    }

    ; Reset some properties
    g.ControlList := []
    ResetMenu()
    g.Window := New g.Window
    g.Anchor := False

    Gui %Child%: Destroy
    Child++

    ; Create a new tab if the current is not empty
    n := TabEx.GetSel()
    If (Sci[n].FileName == "" && !Sci[n].GetModify()) {
        g_GuiTab := n
    } Else {
        g_GuiTab := NewTab()
    }
    TabEx.SetIcon(g_GuiTab, 3)

    ; Initial position, size and title
    WinGetPos ax, ay,,, ahk_id %hAutoWnd%
    x := ax + 240
    y := ay + 128
    w := 481
    h := 381
    g.Window.Title := "Window"

    Gui %Child%: New, +LabelChild +hWndhChildWnd +Resize +OwnerAuto -DPIScale
    Gui %Child%: Show, x%x% y%y% w%w% h%h%, % g.Window.Title
    SetWindowIcon(hChildWnd, IconLib, 5)
    CreateResizers()

    GenerateCode()
    SetDocumentStatus(g_GuiTab)
    g_GuiSB := True
    GoSub SwitchToDesignMode
Return

Class GuiClass {
    ControlList := []
    Selection := []
    Anchor := False
    Clipboard := ""
    LastControl := 0

    Class Window {
        Title := "Window"
        Options := ""
        hWndVar := ""
        Name := ""
        Label := ""
        Style := ""
        ExStyle := ""
        FontName := ""
        FontOptions := ""
        Color := ""
        GuiClose := True
        GuiEscape := True
        GuiSize := False
        GuiContextMenu := False
        GuiDropFiles := False
        OnClipboardChange := False
        Icon := ""
        IconIndex := 1
        Center := True
        Extra := ""
    }

    Class Control {
        Handle := -1
        Class := ""
        ClassNN := ""
        Text := ""
        x := 0
        y := 0
        w := 0
        h := 0
        hWndVar := ""
        vVar := ""
        gLabel := ""
        Anchor := ""
        Options := ""
        Style := ""
        ExStyle := ""
        FontName := ""
        FontOptions := ""
    }
}

AddControl(ControlType) {
    Gui %Child%: Default

    ; ControlType is the display name in the toolbox.
    ; Type is the AHK name (except Separator, Toolbar and CommandLink)

    Type := GetControlType(ControlType)

    If Type Not In Edit,Hotkey,ListBox,ListView,TreeView
        g_Adding := True

    If Type Not In TreeView,Hotkey,DateTime
        Text := Default[Type].Text

    Options := Default[Type].Options
    Size := " w" . Default[Type].Width . " h" . Default[Type].Height
    Position := " x" . g_X . " y" . g_Y

    If (Type == "Picture") {
        Icon := 0
        If (ChoosePicture(g_PicturePath, Icon)) {
            Text := g_PicturePath
            If (Icon) {
                Options := " Icon" . Icon
            }
        }

        Size := ""
    } Else If (Type == "Separator") {
        Type := "Text"
    } Else If (Type == "UpDown") {
        If (g[g.LastControl].Type != "Edit") {
            Options .= " -16"
        }
    } Else If (Type == "StatusBar") {
        Size := Position := ""
    } Else If (Type == "CommandLink") {
        Type := "Custom"
    }

    TabPos := IsInTab(g_X, g_Y)
    If (TabPos[1]) {
        Gui Tab, % TabPos[1], % TabPos[2]
    }

    _Options := ""
    If (Type == "Tab2") {
        _Options := " AltSubmit +Theme"
    } Else If (Type == "Text" || Type == "Picture") {
        _Options := " +0x100" ; SS_NOTIFY (for WM_SETCURSOR)
    }

    Gui %Child%: Add, %Type%, % "hWndhWnd " . Options . Size . Position . _Options, %Text%

    If (TabPos[1] || Type == "Tab2") {
        Gui %Child%: Tab
    }

    If (Type == "TreeView") {
        Gui %Child%: Default
        Parent := TV_Add("TreeView")
        TV_Add("Child", Parent)
    }

    If (g.Window.FontName != "" || g.Window.FontOptions != "") {
        Gui %Child%: Font, % g.Window.FontOptions, % g.Window.FontName
        GuiControl Font, %hWnd%
        Gui %Child%: Font
    }

    g.ControlList.Insert(hWnd)
    ClassNN := GetClassNN(hWnd)
    GuiControlGet c, %Child%:Pos, %hWnd%

    Extra := (ControlType == "Command Link") ? ControlType : ""

    Register(hWnd, Type, ClassNN, Text, cx, cy, cw, ch, "", "", "", Options, "", "", "", "", TabPos, Extra)
    GenerateCode()

    Properties_AddItem(ClassNN)
    If (IsWindowVisible(hPropWnd)) {
        GoSub ShowProperties
    }

    DestroySelection()
    Return hWnd
}

Register(hWnd, Type, ClassNN, Text, x, y, w, h, hWndVar, vVar, gLabel, Options, Style, ExStyle, Font, Anchor, TabPos, Extra := "") {
    g[hWnd] := New g.Control
    g[hWnd].Handle := hWnd
    g[hWnd].Class := GetClassName(hWnd)
    g[hWnd].Type := Type
    g[hWnd].ClassNN := (ClassNN != "") ? ClassNN : GetClassNN(hWnd)
    g[hWnd].Text := Text
    g[hWnd].x := x
    g[hWnd].y := y
    g[hWnd].w := w
    g[hWnd].h := h
    g[hWnd].hWndVar := hWndVar
    g[hWnd].vVar := vVar
    g[hWnd].gLabel := gLabel
    g[hWnd].Options := Options
    g[hWnd].Style := Style
    g[hWnd].ExStyle := ExStyle
    g[hWnd].Font := Font
    g[hWnd].Anchor := Anchor
    g[hWnd].Tab := TabPos
    g[hWnd].Deleted := False
    g[hWnd].Extra := Extra
    g.LastControl := hWnd
    g_Control := hWnd
}

MoveControl() {
    If (g_Adding) {
        Return
    }

    Gui %Child%: Default

    CoordMode Mouse, Screen
    MouseGetPos mx1, my1,, g_Control, 2

    Selection := GetSelectedItems()

    Controls := []
    For Each, Item In Selection {
        GuiControlGet c, Pos, %Item%
        Controls.Insert({x: cx, y: cy})
    }

    ;While (GetKeyState("LButton", "P")) {
    While (g_LButtonDown) {
        MouseGetPos mx2, my2

        If (mx2 == PrevX && my2 == PrevY) {
            Continue
        }

        PrevX := mx2
        PrevY := my2

        For Index, Item In Selection {
            GuiControlGet c, Pos, % Item
            If (SnapToGrid) {
                PosX := RoundTo(Controls[Index].x + (mx2 - mx1), GridSize)
                PosY := RoundTo(Controls[Index].y + (my2 - my1), GridSize)
            } Else {
                PosX := Controls[Index].x + (mx2 - mx1)
                PosY := Controls[Index].y + (my2 - my1)
            }
            GuiControl MoveDraw, %Item%, % "x" . PosX . " " . "y" . PosY
        }

        If (g_GuiSB) {
            Gui Auto: Default
            SB_SetText("Position: " . (g[Selection[1]].x + (mx2 - mx1)) . ", " . g[Selection[1]].y + (my2 - my1), 2)
            Gui %Child%: Default
        }

        Sleep 1
    }

    If (mx2 == mx1 && my2 == my1) {
        Return
    }

    For Each, Item In Selection {
        GuiControlGet c, Pos, % Item
        g[Item].x := cx
        g[Item].y := cy
    }

    GoSub LoadProperties
    GenerateCode()
    UpdateSelection()
    Return
}

ResizeControl(hCtrl) {
    HideResizers()

    MouseGetPos mx, my
    ControlGetPos,,, w, h,, ahk_id %hCtrl%
    xOffset := w - mx
    yOffset := h - my

    Gui %Child%: Default
    Selection := GetSelectedItems()

    ;While (GetKeyState("LButton", "P")) {
    While (g_LButtonDown) {
        MouseGetPos mx, my

        h := my + yOffset
        w := mx + xOffset

        If (SnapToGrid) {
            w := RoundTo(w, GridSize)
            h := RoundTo(h, GridSize)
        }

        For Each, Item In Selection {
            GuiControl MoveDraw, %Item%, w%w% h%h%
        }

        If (g_GuiSB) {
            Gui Auto: Default
            SB_SetText("Size: " . w . " x " . h, 3)
            Gui %Child%: Default
        }

        Sleep 1
    }

    For Each, Item In Selection {
        GuiControlGet cPos, Pos, % Item
        g[Item].w := cPosW
        g[Item].h := cPosH
    }

    GoSub LoadProperties
    GenerateCode()
    UpdateSelection()
}

RemoveControl(hCtrl) {
    If (hCtrl == hChildWnd) {
        Return
    }

    If (g[hCtrl].Type == "StatusBar") {
        GuiControl Hide, %hCtrl%
        g[hCtrl].Deleted := True
        GoSub ReloadSub
        GenerateCode()
        Return
    }

    If (g[hCtrl].Type == "Tab2") {
        Gui %Child%: Tab
    }

    hParent := GetParent(hCtrl)
    If (hParent != hChildWnd) {
        hCtrl := hParent
    }

    g[hCtrl].Deleted := DestroyWindow(hCtrl)

    For Each, Item in g.ControlList {
        If (g.ControlList[A_Index] == hCtrl) {
            g.ControlList.Remove(A_Index)
            Break
        }
    }
}

GetSelectedItems() {
    If (g.Selection.MaxIndex() != "") {
        Return g.Selection
    } Else {
        If (g[g_Control].Handle == "") {
            g_Control := GetParent(g_Control)
        }
        SelectedItems := []
        SelectedItems.Insert(g_Control)
        Return SelectedItems
    }
}

CutControl() {
    g.Clipboard := g_Control
    GuiControl Hide, %g_Control%
    g[g_Control].Deleted := True
    Menu WindowContextMenu, Enable, Paste
    GenerateCode()
    DestroySelection()
    If (g_Control == hGrippedWnd) {
        HideResizers()
    }
}

CopyControl() {
    g.Clipboard := g[g_Control].Clone()
    Menu WindowContextMenu, Enable, Paste
}

PasteControl() {
    If (g.Clipboard.HasKey("Handle")) {
        ; Copy
        Type := g.Clipboard.Type
        x := g_x
        y := g_y
        w := g.Clipboard.w
        h := g.Clipboard.h
        Text := g.Clipboard.Text
        Options := g.Clipboard.Options
        Style := g.Clipboard.Style
        ExStyle := g.Clipboard.ExStyle
        Extra := g.Clipboard.Extra

        TabPos := IsInTab(x, y)
        If (TabPos[1]) {
            Gui %Child%: Tab, % TabPos[1], % TabPos[2]
        }

        Gui %Child%: Add, %Type%, hWndhWnd x%x% y%Y% w%w% h%h% %Options% %Style% %ExStyle%, %Text%

        ClassNN := GetClassNN(hWnd)
        Register(hWnd, Type, ClassNN, Text, x, y, w, h, "", "", "", Options, Style, ExStyle,"","", TabPos, Extra)
        g.ControlList.Insert(hWnd)
        Properties_AddItem(ClassNN)

        fFont := False
        g[hWnd].FontOptions := g.Clipboard.FontOptions
        g[hWnd].FontName := g.Clipboard.FontName
        If (g[hWnd].FontOptions != "" || g[hWnd].FontName != "") {
            Gui %Child%: Font, % g[hWnd].FontOptions, % g[hWnd].FontName
            fFont := True
        } Else If (g.Window.FontOptions != "" || g.Window.FontName != "") {
            Gui %Child%: Font, % g.Window.FontOptions, % g.Window.FontName
            fFont := True
        }

        If (fFont) {
            GuiControl Font, %hWnd%
            Gui %Child%: Font
        }

        If (TabPos[1]) {
            Gui %Child%: Tab
        }
    } Else {
        ; Cut
        g[g.Clipboard].x := g_X
        g[g.Clipboard].y := g_Y
        GuiControl Move, % g.Clipboard, % "x" . g[g.Clipboard].x . " y" . g[g.Clipboard].y
        GuiControl Show, % g.Clipboard
        g[g.Clipboard].Deleted := False
    }

    GenerateCode()
}

ResetMenu() {
    m.Code := ""

    hMenu := GetMenu(hChildWnd)
    TopMenuCount := GetMenuItemCount(hMenu)
    Loop %TopMenuCount% {
        hSubMenu := GetSubMenu(hMenu, A_Index - 1)
        SubMenuCount := GetMenuItemCount(hSubMenu)
        Loop %SubMenuCount% {
            DeleteMenu(hSubMenu, 0)
        }
    }
    Try {
        Menu MenuBar, Delete
    }
}

AddStatusBar() {
    If (StatusBarExist()) {
        Gui %Child%: Default
        GuiControlGet SBVis, Visible, msctls_statusbar321
        GuiControl Hide%SBVis%, msctls_statusbar321
        GuiControlGet hStatusBar, Hwnd, msctls_statusbar321
        g[hStatusBar].Deleted := SBVis
        GenerateCode()
        GoSub ReloadSub
    } Else {
        AddControl("Status Bar")
    }
}

StatusBarExist() {
    GuiControlGet SBExist, %Child%: hWnd, msctls_statusbar321
    Return SBExist
}

MenuBarExist() {
    Return GetMenu(hCHildWnd)
}

ToolbarExist() {
    Return IsWindow(hChildToolbar)
}

Select(SelectedControls) {
    If (SelectedControls.MaxIndex() == "") {
        Return
    }

    If (!WinExist("ahk_id " . hSelWnd)) {
        Gui SelWnd: New, hWndhSelWnd +ToolWindow -Border -Caption +E0x20 +OwnerAuto +LastFound -DPIScale
        Gui SelWnd: Color, 0xF0F0F0
        WinSet TransColor, 0xF0F0F0 100
        WinGetPos wX, wY, wW, wH, ahk_id %hChildWnd%
        Gui SelWnd: Show, NA x%wX% y%wY% w%wW% h%wH%
    }

    For Each, Item In SelectedControls {
        ControlGetPos cX, cY, cW, cH,, ahk_id %Item%
        Gui SelWnd: Add, Progress, c1BCDEF x%cX% y%cY% w%cW% h%cH%, 100
    }
}

SelectAllControls() {
    g.Selection := []
    For Each, Item In g.ControlList {
        If (g[Item].Deleted == False) {
            g.Selection.Insert(Item)
        }
    }
    Select(g.Selection)
}

SelectTabItems(hTabControl) {
    g.Selection.Insert(hTabControl)
    ControlGetPos tx, ty, tw, th,, ahk_id %hTabControl%
    TabItems := GetControlsFromRegion(tx + 1, ty + 1, (tx + tw), (ty + th))
    For Each, Item In TabItems {
        g.Selection.Insert(Item)
    }
    Select(g.Selection)
}

DestroySelection() {
    DestroyWindow(hSelWnd)
    g.Selection := []
}

UpdateSelection() {
    DestroyWindow(hSelWnd)
    Select(g.Selection)
}

GetControlsFromRegion(x1, y1, x2, y2) {
    ControlsFromRegion := []

    If (x1 > x2) { ; Selection is from right to left
        x1 ^= x2, x2 ^= x1, x1 ^= x2
    }

    If (y1 > y2) { ; Selection is from bottom to top
        y1 ^= y2, y2 ^= y1, y1 ^= y2
    }

    WinGet Children, ControlListHwnd, ahk_id %hChildWnd%
    Loop Parse, Children, `n
    {
        If (g[A_LoopField].Class == "") {
            Continue
        }

        ControlGetPos CtrlX, CtrlY,,,, ahk_id %A_LoopField%

        If (IfBetween(CtrlX, x1, x2) And (IfBetween(CtrlY, y1, y2))) {
            ControlsFromRegion.Insert(A_LoopField)
        }
    }

    Return ControlsFromRegion
}

IsInTab(x, y) {
    TabControls := []
    WinGet Controls, ControlList, ahk_id %hChildWnd%
    Loop Parse, Controls, `n
    {
        If (InStr(A_LoopField, "Tab")) {
            TabControls.Insert(A_LoopField)
        }
    }

    For TabControl, Item In TabControls {
        ControlGetPos tx, ty, tw, th, %Item%, ahk_id %hChildWnd%
        If (IfBetween(x, tx, (tx + tw)) && (IfBetween(y, (ty + 1), (ty + th)))) {
            GuiControlGet TabIndex, %Child%:, %Item%
            Return [TabIndex, TabControl]
        }
    }
}

OrderTabItems() {
    TabControls := []
    TabItems := []
    Items := []

    For Index, Item In g.ControlList {
        If (g[Item].Type == "Tab2") {
            TabControls.Insert(Item)
        } Else If (g[Item].Tab[1] != "") {
            TabItems[g[Item].Tab[2], g[Item].Tab[1], Index] := Item
        } Else {
            Items.Insert(Item)
        }
    }

    OrderedList := []
    For i, TabControl In TabControls {
        OrderedList.Insert(TabControl)
        For j, TabPage In TabItems[i] {
            For k, TabItem In TabItems[i][j] {
                OrderedList.Insert(TabItems[i][j][k])
            }
        }
    }

    g.ControlList := Items

    For Each, Item In OrderedList {
        g.ControlList.Insert(Item)
    }
}

DeleteSelectedControls() {
    DeleteSelectedControls:
    Selection := GetSelectedItems()

    For Each, Item In Selection {
        RemoveControl(Item)
        If (Item == hGrippedWnd) {
            HideResizers()
        }
    }

    GoSub ReloadSub
    GenerateCode()
    g.Selection := []
    DestroySelection()
    Return
}

AlignLefts() {
    Gui %Child%: Default
    GuiControlGet p, Pos, % g.Selection[1]
    For Each, Item In g.Selection {
        GuiControl Move, % Item, % "x" . px
        g[Item].x := px
    }
    GenerateCode()
    UpdateSelection()
    HideResizers()
}

AlignRights() {
    Gui %Child%: Default
    GuiControlGet p, Pos, % g.Selection[1]
    For Each, Item In g.Selection {
        ControlGetPos,,, w,,, ahk_id %Item%
        x := (px + pw) - w
        GuiControl Move, % Item, % "x" . x
        g[Item].x := x
    }
    GenerateCode()
    UpdateSelection()
    HideResizers()
}

AlignTops() {
    Gui %Child%: Default
    GuiControlGet p, Pos, % g.Selection[1]
    For Each, Item In g.Selection {
        GuiControl Move, % Item, % "y" . py
        g[Item].y := py
    }
    GenerateCode()
    UpdateSelection()
    HideResizers()
}

AlignBottoms() {
    Gui %Child%: Default
    GuiControlGet p, Pos, % g.Selection[1]
    For Each, Item In g.Selection {
        ControlGetPos, ,,, h,, ahk_id %Item%
        y := (py + ph) - h
        GuiControl Move, % Item, % "y" . y
        g[Item].y := y
    }
    GenerateCode()
    UpdateSelection()
    HideResizers()
}

CenterHorizontally() {
    CenterHorizontally:
    WinGetPos,,, ww,, ahk_id %hChildWnd%

    Selection := GetSelectedItems()

    If (Selection.Length() > 1) {
        x1 := 100000
        For Each, Item In Selection {
            ControlGetPos cx,,,,, ahk_id %Item%
            If (cx < x1) {
                x1 := cx
            }
        }
        x2 := 0
        For Each, Item In Selection {
            ControlGetPos cx,, cw,,, ahk_id %Item%
            If ((cx + cw) > x2) {
                x2 := cx + cw
            }
        }
        cw := x1 + x2
    } Else {
        ControlGetPos,,, cw,,, % "ahk_id " . Selection[1]
    }

    ww -= cw
    ww /= 2

    If (Selection.Length() > 1) {
        For Each, Item In Selection {
            ControlGetPos, cx,,,,, ahk_id %Item%
            ControlMove,, % ww + cx,,,, ahk_id %Item%
        }
    } Else {
        ControlMove,, % ww,,,, % "ahk_id " . Selection[1]
    }

    Repaint(hChildWnd)
    GoSub LoadProperties
    GenerateCode()
    UpdateSelection()
    HideResizers()
    Return
}

CenterVertically() {
    GetClientSize(hChildWnd, ww, wh)
    Gui %Child%: Default

    Selection := GetSelectedItems()

    If (Selection.Length() > 1) {
        Min := 100000
        For Each, Item In Selection {
            GuiControlGet c, Pos, %Item%
            If (cy < Min) {
                Min := cy
            }
        }
        Max := 0
        For Each, Item In Selection {
            GuiControlGet c, Pos, %Item%
            If ((cy + ch) > Max) {
                Max := cy + ch
            }
        }
        ch := Min + Max
    } Else {
        GuiControlGet c, Pos, % Selection[1]
    }

    wh := (wh - ch) / 2

    If (Selection.Length() > 1) {
        For Each, Item In Selection {
            GuiControlGet c, Pos, %Item%
            GuiControl Move, %Item%, % "y" . (wh + cy)
        }
    } Else {
        GuiControl Move, % Selection[1], y%wh%
    }

    Repaint(hChildWnd)
    GoSub LoadProperties
    GenerateCode()
    UpdateSelection()
    HideResizers()
}

HorizontallySpace() {
    Gui %Child%: Default
    MaxIndex := g.Selection.Length()

    Start := 100000, End := 0, ControlList := ""
    For Index, Item in g.Selection {
        ControlGetPos, x,, w,,, ahk_id %Item%
        If ((x + w) < Start) {
            Start := x + w
            FirstItem := Item
        }
        If (x > End) {
            End := x
            LastItem := Item
        }
        ControlList .= (Index != MaxIndex) ? Item . "|" : Item
    }

    InnerWidth := End - Start
    InnerItemsWidth := 0
    For Each, Item in g.Selection {
        If ((Item != FirstItem) && (Item != LastItem)) {
            ControlGetPos,,, w,,, ahk_id %Item%
            InnerItemsWidth += w
        }
    }
    EmptySpace := InnerWidth - InnerItemsWidth
    Quotient := EmptySpace // (MaxIndex - 1)

    Sort ControlList, D| F SortByX
    Controls := []
    Loop Parse, ControlList, `|
    {
        Controls.Push(A_LoopField)
    }

    For Index, Control in Controls {
        If ((Index != 1) && (Index != MaxIndex)) {
            GuiControlGet p, Pos, % Controls[(Index - 1)]
            GuiControl MoveDraw, % Control, % "x" . (px + pw) + Quotient
        }
    }

    GenerateCode()
    UpdateSelection()
    HideResizers()
}

VerticallySpace() {
    Gui %Child%: Default
    MaxIndex := g.Selection.Length()

    Start := 100000, End := 0, ControlList := ""
    For Index, Item in g.Selection {
        ControlGetPos,, y,, h,, ahk_id %Item%
        If ((y + h) < Start) {
            Start := y + h
            FirstItem := Item
        }
        If (y > End) {
            End := y
            LastItem := Item
        }
        ControlList .= (Index != MaxIndex) ? Item . "|" : Item
    }

    InnerHeight := End - Start
    InnerItemsHeight := 0
    For Each, Item in g.Selection {
        If ((Item != FirstItem) && (Item != LastItem)) {
            ControlGetPos,,,, h,, ahk_id %Item%
            InnerItemsHeight += h
        }
    }
    EmptySpace := InnerHeight - InnerItemsHeight
    Quotient := EmptySpace // (MaxIndex - 1)

    Sort ControlList, D| F SortByY
    Controls := []
    Loop Parse, ControlList, `|
    {
        Controls.Push(A_LoopField)
    }

    For Index, Control in Controls {
        If ((Index != 1) && (Index != MaxIndex)) {
            GuiControlGet p, Pos, % Controls[(Index - 1)]
            GuiControl MoveDraw, % Control, % "y" . (py + ph) + Quotient
        }
    }

    GenerateCode()
    UpdateSelection()
    HideResizers()
}

SortByX(hCtrl1, hCtrl2) {
    ControlGetPos, x1,,,,, ahk_id %hCtrl1%
    ControlGetPos, x2,,,,, ahk_id %hCtrl2%
    Return (x1 > x2) ? 1 : 0
}

SortByY(hCtrl1, hCtrl2) {
    ControlGetPos,, y1,,,, ahk_id %hCtrl1%
    ControlGetPos,, y2,,,, ahk_id %hCtrl2%
    Return (y1 > y2) ? 1 : 0
}

MakeSameWidth:
    MakeSame("w")
Return

MakeSameHeight:
    MakeSame("h")
Return

MakeSameSize:
    MakeSame("wh")
Return

MakeSame(m) {
    Gui %Child%: Default
    ControlGetPos,,, w, h,, % "ahk_id " . g.Selection[1]
    Expression := ""
    If (InStr(m, "w")) {
        Expression .= "w" . w
    }
    If (InStr(m, "h")) {
        Expression .= "h" . h
    }
    For Each, Item In g.Selection {
        GuiControl Move, % Item, %Expression%
    }
    GenerateCode()
    UpdateSelection()
    HideResizers()
}

StretchControl() {
    Gui %Child%: Default
    GetClientSize(hChildWnd, ww, wh)
    If (A_ThisMenuItem == "Stretch Horizontally") {
        Expression := "x0 w" . ww
    } Else { ; Stretch Vertically
        y := 0
        TBHeight := 0
        SBHeight := 0

        If (ToolbarExist()) {
            ControlGetPos,,,, TBHeight,, ahk_id %hChildToolbar%
            ControlGet TBStyle, Style,,, ahk_id %hChildToolbar%
            y := ((TBStyle & 0x3) == 3) ? 0 : TBHeight ; CCS_BOTTOM
        }

        If (StatusBarExist()) {
            ControlGetPos,,,, SBHeight, msctls_statusbar321, ahk_id %hChildWnd%
        }

        Expression := "y" . y . " h" . (wh - TBHeight - SBHeight)
    }

    Selection := GetSelectedItems()
    For Each, Item In Selection {
        GuiControl Move, %Item%, %Expression%
    }

    GenerateCode()
    UpdateSelection()
    HideResizers()
}

ShowAdjustPositionDialog:
    GuiControlGet p, %Child%: Pos, %g_Control%

    Gui Adjust: New, LabelAdjust -MinimizeBox OwnerAuto
    Gui Adjust: Default
    Gui Add, GroupBox, x6 y6 w192 h102, Position
    Gui Add, Text, x19 y41 w12 h13, &X:
    Gui Add, Edit, vEdtX x34 y36 w50 h21
    Gui Add, UpDown, gAdjustPos x76 y36 w18 h21 Range-65536-65536 +0x80, %px%
    Gui Add, Text, x103 y41 w12 h13, &Y:
    Gui Add, Edit, vEdtY x118 y36 w50 h21
    Gui Add, UpDown, gAdjustPos x160 y36 w18 h21 Range-65536-65536 +0x80, %py%
    Gui Add, Text, x18 y76 w15 h13, &W:
    Gui Add, Edit, vEdtW x34 y71 w50 h21
    Gui Add, UpDown, gAdjustPos x76 y71 w18 h21 Range-65536-65536 +0x80, %pw%
    Gui Add, Text, x103 y76 w12 h13, &H:
    Gui Add, Edit, vEdtH x118 y71 w50 h21
    Gui Add, UpDown, gAdjustPos x160 y71 w18 h21 Range-65536-65536 +0x80, %ph%
    Gui Add, Button, gAdjustPos x217 y6 w75 h23 Default, &Adjust
    Gui Add, Button, gAdjustClose x217 y34 w75 h23, &Close
    Gui Add, Button, gAdjustReset x217 y84 w75 h23, &Reset
    Gui Adjust: Show, w302 h119, Adjust Control Position
    SetWindowIcon(WinExist("A"), IconLib, 75)
    SetModalWindow(True)
Return

AdjustPos:
    Gui Adjust: Submit, NoHide
    GuiControl %Child%: MoveDraw, % g_Control, x%EdtX% y%EdtY% w%EdtW% h%EdtH%
    HideResizers()
Return

AdjustReset:
    Gui Adjust: Default
    GuiControl,, EdtX, %px%
    GuiControl,, EdtY, %py%
    GuiControl,, EdtW, %pw%
    GuiControl,, EdtH, %ph%
    GoSub AdjustPos
Return

AdjustClose:
    Gui Adjust: Submit, NoHide

    g[g_Control].x := EdtX
    g[g_Control].y := EdtY
    g[g_Control].w := EdtW
    g[g_Control].h := EdtH
    GenerateCode()

    If (IsWindowVisible(hPropWnd)) {
        GoSub ShowProperties
    }
AdjustEscape:
    SetModalWindow(False)
    Gui Adjust: Destroy
Return

ChangeTitle:
    SetModalWindow(True)

    Title := UnescapeChars(g.Window.Title)
    NewTitle := InputBoxEx("Window Title", "", "Change Title", Title,,, hAutoWnd,,, IconLib, 37)

    If (!ErrorLevel) {
        WinSetTitle ahk_id %hChildWnd%,, %NewTitle%
        g.Window.Title := EscapeChars(NewTitle, True)
        GenerateCode()

        If (Properties_GetClassNN() == "Window") {
            GuiControl, Properties:, EdtText, %NewTitle%
        }
    }

    SetModalWindow(False)
Return

ChangeText:
    ControlType := g[g_Control].Type

    If (ControlType ~= "TreeView|ActiveX") {
        Gui Auto: +OwnDialogs
        MsgBox 0x40, Change Text, Not available for %ControlType%.
        Return
    } Else If (ControlType == "Picture") {
        ImagePath    := g[g_Control].Text
        ImageOptions := g[g_Control].Options
        ImageType    := RegExMatch(ImageOptions, "i)Icon(\d+)", IconIndex)

        If (ChoosePicture(ImagePath, IconIndex, ImageType)) {
            g[g_Control].Text := ImagePath

            If (ImageType) {
                If (InStr(ImageOptions, "Icon")) {
                   g[g_Control].Options := RegExReplace(ImageOptions, "Icon\d+", "Icon" . IconIndex)
                } Else {
                    g[g_Control].Options .= Space(ImageOptions) . "Icon" . IconIndex
                }
            } Else {
                g[g_Control].Options := RegExReplace(ImageOptions, "Icon\d+")
            }

            Icon := (ImageType) ? "*Icon" . IconIndex . " " : ""
            GuiControl %Child%:, %g_Control%, % Icon . ImagePath
            GenerateCode()
        }
        Return
    }

    hParent := GetParent(g_Control)
    If (g[hParent].Type == "ComboBox") {
        g_Control := hParent
    }

    Instruction := Default[ControlType].DisplayName . " Text"
    Content := ""
    ControlText := UnescapeChars(g[g_Control].Text)
    InputControl := "Edit"
    InputOptions := ""

    If (ControlType == "Text") {
        Instruction := "Text:"

    } Else If (ControlType ~= "ComboBox|DropDownList|ListBox") {
        Instruction := ControlType . " Items"
        Content := "Pipe-delimited list of items. To have one of the entries pre-selected, include two pipes after it (e.g. Red|Green||Blue)."

    } Else If (ControlType == "ListView") {
        Instruction := "ListView Columns"
        Content := "Pipe-delimited list of column names (e.g. ID|Name|Value):"

    } Else If (ControlType == "Tab2") {
        Instruction := "Tabs"
        Content := "Separate each tab item with a pipe character (|)."

    } Else If (ControlType ~= "Progress|Slider|UpDown") {
        Instruction := Default[ControlType].DisplayName . " Position"
        InputOptions := "Number"

    } Else If (ControlType == "Hotkey") {
        Instruction := "Hotkey"
        Content := "Modifiers: ^ = Control, + = Shift, ! = Alt.`nSee the <a href=""https://autohotkey.com/docs/KeyList.htm"">key list</a> for available key names."

    } Else If (ControlType == "DateTime") {
        Instruction := "Date Time Picker"
        Content := "Format: (e.g.: LongDate, Time, dd-MM-yyyy)"
        InputControl := "ComboBox"
        PreDefItems := StrReplace("|ShortDate|LongDate|Time", (ControlText != "") ? "|" . ControlText : "")
        ControlText .= "|" . PreDefItems

    } Else If (ControlType == "MonthCal") {
        Instruction := "Month Calendar"
        Content := "To have a date other than today pre-selected, specify it in YYYYMMDD format."

    } Else If (g[g_Control].Extra == "Command Link") {
        Instruction := "Command Link Text"
    }

    SetModalWindow(True)

    NewText := InputBoxEx(Instruction
        , Content
        , "Change Text"
        , ControlText
        , InputControl
        , InputOptions
        , hAutoWnd
        , "", ""
        , IconLib, 14)

    If (!ErrorLevel) {
        SetControlText(g_Control, NewText)
        GenerateCode()
    }

    SetModalWindow(False)
Return

SetControlText(hWnd, Text) {
    If (g[hWnd].Type == "Button" && Text = "...") {
        GuiControl %Child%: Move, %hWnd%, w23 h23
        g[hWnd].w := 23
        g[hWnd].h := 23
    }

    ; Unescape newline e tab
    StringReplace Text, Text, ``n, `n, A
    StringReplace Text, Text, ``t, `t, A

    If (g[hWnd].Type == "ListView") {
        Gui %Child%: Default
        While (LV_GetText(foo, 0, 1)) {
            LV_DeleteCol(1)
        }
        Loop Parse, Text, |
        {
            LV_InsertCol(A_Index, "AutoHdr", A_LoopField)
        }
        LV_ModifyCol(1, "AutoHdr")
    } Else If (g[hWnd].Type ~= "Tab2|ListBox") {
        GuiControl %Child%:, %hWnd%, |%Text%
    } Else If (g[hWnd].Type == "DateTime") {
        GuiControl Text, %hWnd%, % (Text == "ShortDate") ? "" : Text
    } Else If (g[hWnd].Extra == "Command Link") {
        CLText := StrSplit(Text, "`n")
        GuiControl %Child%:, %hWnd%, % CLText[1]
        If (CLText.Length() > 1) {
            Note := StrReplace(Text, CLText[1] . "`n")
            SendMessage 0x1609, 0, % "" . Note,, ahk_id %hWnd% ; BCM_SETNOTE
            GuiControl %Child%: Move, %hWnd%, h58
        }
    } Else {
        GuiControl %Child%:, %hWnd%, %Text%
    }

    If (Properties_GetClassNN() == g[hWnd].ClassNN) {
        GuiControl, Properties:, EdtText, %Text%
    }

    g[hWnd].Text := EscapeChars(Text)
}

EscapeChars(String, Title := False) {
    String := RegExReplace(String, "``(?!n|t)", "````") ; Backtick (lookahead skips `n e `t)
    String := StrReplace(String, " `;", " ```;")        ; Comment
    StringReplace String, String, `%, ```%, A           ; %
    If (Title) {
        StringReplace String, String, `,, ```,, A       ; Comma
    } Else {
        StringReplace String, String, `n, ``n, A        ; Newline
        StringReplace String, String, `t, ``t, A        ; Tab
    }
    Return String
}

UnescapeChars(String) {
    String := StrReplace(String, "``%", "%")
    String := StrReplace(String, " ```;", " `;")
    String := StrReplace(String, "``,", ",")
    String := StrReplace(String, "````", "``")
    Return String
}

ChoosePicture(ByRef ImagePath, ByRef IconIndex, ByRef ImageType := 0) {
    If (!ImageType) {
        Filter := "*.jpg; *.png; *.gif; *.bmp; *.ico; *.icl; *.exe; *.dll; *.cpl; *.jpeg"
        Gui Auto: +OwnDialogs
        FileSelectFile SelectedFile, 1, %ImagePath%, Select Picture File, Picture Files (%Filter%)
        If (ErrorLevel) {
            Return
        }

        SplitPath SelectedFile,,, FileExt
        If (FileExt ~= "i)exe|dll|cpl|icl|scr|ocx|ax") {
            ImagePath := SelectedFile
            ImageType := 1
        } Else {
            ImagePath := SelectedFile
        }
    }

    If (ImageType) {
        If (ChooseIcon(ImagePath, IconIndex, hAutoWnd)) {
            ImagePath := IconPath := StrReplace(ImagePath, A_WinDir . "\System32\")
        } Else {
            Return
        }
    }

    Return 1
}

ShowActiveXDialog() {
    ActiveXComponent := InputBoxEx("ActiveX Component"
        , "Enter the identifier of an ActiveX object that can be embedded in a window.`nA folder path or an Internet address is loaded in Explorer."
        , "ActiveX"
        , "Shell.Explorer|C:\|HTMLFile|about:<html></html>|www.autohotkey.com|WMPlayer.OCX"
        , "ComboBox"
        , ""
        , hAutoWnd
        , "", ""
        , IconLib, 46)

    If (!ErrorLevel) {
        Default["ActiveX"].Text := ActiveXComponent
        g_Cross := True
    }
}

ShowCustomClassDialog() {
    ClassName := InputBoxEx("Win32 Control Class Name"
        , "Enter the name of a registered Win32 control class."
        , "Custom Class"
        , "Button|ComboBoxEx32|ReBarWindow32|ScrollBar|SysAnimate32|SysPager"
        , "ComboBox"
        , ""
        , hAutoWnd
        , "", ""
        , IconLib, 71)

    If (!ErrorLevel) {
        Default["Custom"].Options := "Class" . ClassName

        If (ClassName == "ComboBoxEx32") {
            Default["Custom"].Options .= " +0x3"
        } Else If (ClassName == "SysPager") {
            Default["Custom"].Options .= " +E0x20000"
        }

        g_Cross := True
    }
}

ToggleGrid:
    ShowGrid := !ShowGrid
    Repaint(hChildWnd)
    SendMessage TB_CHECKBUTTON, 1080, %ShowGrid%,, ahk_id %hGUIToolbar%
    Menu AutoOptionsMenu, ToggleCheck, Show &Grid
Return

ToggleSnapToGrid:
    SnapToGrid := !SnapToGrid
    If (SnapToGrid) {
        Menu AutoOptionsMenu, Check, S&nap To Grid
    } Else {
        Menu AutoOptionsMenu, Uncheck, S&nap To Grid
    }
    SendMessage TB_CHECKBUTTON, 1090, %SnapToGrid%,, ahk_id %hGUIToolbar%
Return

Repaint(hWnd) {
    WinSet Redraw,, ahk_id %hWnd%
}

RedrawWindow:
    WinSet Redraw,, ahk_id %hChildWnd%
    WinSet Redraw,, ahk_id %hAutoWnd%
Return

; Message handling

AutoSize:
    If (A_EventInfo == 1) { ; The window has been minimized.
        Return
    }

    Gui Auto: Default

    GuiControlGet, ToolBox, Pos, %hToolBox%
    GuiControlGet, TabCtl, Pos, %hTab%

    GuiControl Move, %hGUIToolbar%, w%A_GuiWidth%
    GuiControl Move, %hMainToolbar%, w%A_GuiWidth%

    GuiControl Move, %hToolBox%, % "h" . A_GuiHeight - g_ToolbarH - g_StatusBarH

    If (g_TabBarPos == 1) {
        TabCtlY := g_ToolbarH
        SciY := TabCtlY + TabCtlH + 1
        SciH := A_GuiHeight - g_StatusBarH - SciY
    } Else {
        TabCtlY := A_GuiHeight - g_StatusBarH - TabCtlH
        SciY := g_ToolbarH
        SciH := A_GuiHeight - g_StatusBarH - TabCtlH - SciY
    }

    If (DesignMode) {
        TabCtlW := A_GuiWidth - ToolboxW - 2
        SciW := A_GuiWidth - ToolBoxW - g_SplitterW
    } Else {
        TabCtlW := A_GuiWidth
        SciW := A_GuiWidth + 1
    }

    GuiControl MoveDraw, %hTab%, y%TabCtlY% w%TabCtlW%

    Loop % Sci.Length() {
        SetWindowPos(Sci[A_Index].hWnd, 0, 0, SciW, SciH, 0, 0x16) ; SWP_NOMOVE | SWP_NOZORDER | SWP_NOACTIVATE
    }

    If (DesignMode) {
        Gui ListView, %hToolBox%
        LV_ModifyCol(1, "AutoHdr")
    }
Return

AutoDropFiles:
    Files := StrSplit(A_GuiEvent, "`n")
    Open(Files)
Return

AutoClose:
    If (g_RememberSession) {
        GoSub SaveSessionOnExit
    }

    If (g_AskToSaveOnExit) {
        GoSub AskToSaveOnExit
    } Else {
        GoSub AutoExit
    }
Return

AutoExit:
    If (g_DbgStatus) {
        GoSub DebugStop
        DBGp_StopListening(g_DbgSocket)
    }

    SaveSettings()

    IL_Destroy(TabExIL)

    FileDelete %A_Temp%\AutoXYWH.ahk
    FileDelete %A_Temp%\Toolbar.ahk

    ExitApp
Return

ChildSize:
    If (A_EventInfo == 1) { ; The window has been minimized.
        ShowChildWindow(0)
        Return
    }

    If (g_GuiSB) {
        Gui Auto: Default
        SB_SetText("Size: " . A_GuiWidth . " x " . A_GuiHeight, 3)
    }
Return

ChildEscape:
ChildClose:
    ShowChildWindow(0)
Return

OnWM_CTLCOLORDLG(wParam, lParam, msg, hWnd) {
    Static Brush := 0

    If (A_Gui != Child || !ShowGrid) {
        Return
    }

    If (!Brush) {
        Brush := DllCall("Gdi32.dll\CreatePatternBrush", "UInt", hBitmapTile)
    }

    Return Brush
}

OnWM_MOVE(wParam, lParam, msg, hWnd) {
    If (hWnd != hChildWnd) {
        Return
    }

    WinGetPos wx, wy,,, ahk_id %hChildWnd%

    If (WinExist("ahk_id " . hSelWnd)) {
        WinMove ahk_id %hSelWnd%,, %wx%, %wy%
    }

    Gui Auto: Default
    SB_SetText("Position: " . wx . ", " . wy, 2)
}

OnWM_EXITSIZEMOVE(wParam, lParam, msg, hWnd) {
    If (hWnd == hChildWnd) {
        GenerateCode()

        If (Properties_GetClassNN() == "Window") {
            GoSub LoadProperties
        }

        If (ToolbarExist()) {
            Repaint(hChildWnd)
        }
    }
}

OnWM_MOUSEMOVE(wParam, lParam, msg, hWnd) {
    Static hPrevCtrl := 0

    If (GetActiveWindow() != hAutoWnd && hWnd != hGUIToolbar) {
        Tooltip
    }

    CoordMode Mouse, Window
    MouseGetPos x1, y1, hWindow, hControl, 2

    If (hControl == "") {
        hControl := hWindow
    }

    ; Update status bar info
    If (g_GuiSB) {
        If ((hControl != hPrevCtrl) ) {
            If (hControl != hChildWnd) {
                GuiControlGet Pos, Pos, %hControl%
                MouseGetPos,,,, ClassNN

                Gui Auto: Default
                SB_SetText("Position: " . PosX . ", " . PosY, 2)
                SB_SetText("Size: " . PosW . " x " . PosH, 3)
                SB_SetText(ClassNN, 5)
            } Else {
                WinGetTitle WinTitle, ahk_id %hWindow%
                wi := GetWindowInfo(hWindow)
                wx := wi.WindowX
                wy := wi.WindowY
                ww := wi.ClientW
                wh := wi.ClientH

                Gui Auto: Default
                SB_SetText("AutoHotkeyGUI", 5)
                SB_SetText("Position: " . wx . ", " . wy, 2)
                SB_SetText("Size: " . ww . " x " . wh, 3)
            }

            hPrevCtrl := hControl
        }

        Gui Auto: Default
        CoordMode Mouse, Client
        MouseGetPos mx, my
        SB_SetText("Cursor: " . mx . ", " . my, 4)
    }

    If (hWnd == hChildWnd && g_Cross) {
        DllCall("SetCursor", "UInt", hCursorCross)
    }

    If (hWindow != hChildWnd) {
        Return
    }

    LButtonP := wParam & 1 ; MK_LBUTTON

    If (LButtonP && IsResizer(hControl)) {
        OnResize(hControl)

    } Else If (LButtonP && !(wParam & 0x8)) { ; MK_CONTROL
        If (hControl == hChildWnd) {
            DestroyWindow(hSelWnd)
            WinGetPos wx, wy, ww, wh, ahk_id %hChildWnd%
            ; Translucid selection rectangle (based on Maestrith's GUI Creator)
            Gui SelRect: New, LabelSelRect hWndhSelRect -Caption AlwaysOnTop ToolWindow
            Gui SelRect: Color, 1BCDEF
            WinSet Transparent, 40, ahk_id %hSelRect%
            Gui SelRect: Show, x%wx% y%wy% w%ww% h%wh% NoActivate Hide
            Gui SelRect: Show, NoActivate

            While GetKeyState("LButton", "P") {
                CoordMode Mouse, Window
                MouseGetPos x2, y2
                WinSet Region, %x1%-%y1% %x2%-%y1% %x2%-%y2% %x1%-%y2% %x1%-%y1%, ahk_id %hSelRect%
            }
            Gui SelRect: Destroy

            g.Selection := GetControlsFromRegion(x1, y1, x2, y2)
            Select(g.Selection)
        } Else {
            If (wParam & 0x4) { ; MK_SHIFT
                DestroyWindow(hSelWnd)
                ResizeControl(hControl)
            } Else {
                DestroyWindow(hSelWnd)
                HideResizers()
                MoveControl()
                ShowResizers()
                Select(g.Selection)
            }
        }
    }
}

OnWM_LBUTTONDOWN(wParam, lParam, msg, hWnd) {
    g_LButtonDown := 1

    If (GetClassName(hWnd) == "Scintilla") {
        ShowChildWindow(0)
    }

    If (GetActiveWindow() != hChildWnd) {
        Return
    }

    If (IsResizer(hWnd)) {
        Return
    }

    MouseGetPos,,, hGui, g_Control, 2

    CtrlP := wParam & 0x8 ; MK_CONTROL

    If (g_Cross) {
        If (!CtrlP) {
            g_Cross := False
        }

        g_X := lParam & 0xFFFF
        g_Y := lParam >> 16

        Gui Auto: Default
        RowNumber := LV_GetNext()
        LV_GetText(Type, RowNumber)
        If (Type != "Toolbox") {
            AddControl(Type)
        }

        Return
    }

    If (g_Control == "") {
        DestroyWindow(hSelWnd)
        HideResizers()
        If (IsWindowVisible(hPropWnd)) {
            GoSub ShowProperties
        }
        Return
    } Else {
        ShowResizers()
    }

    If (CtrlP) {
        fSelect := True
        Loop % g.Selection.MaxIndex() {
            If (g_Control == g.Selection[A_Index]) {
                g.Selection.Remove(A_Index)
                fSelect := False
                Break
            }
        }
        If (fSelect) {
            If (g[g_Control].Type == "Tab2") {
                SelectTabItems(g_Control)
            } Else {
                g.Selection.Insert(g_Control)
                Select([g_Control])
            }
        } Else {
            UpdateSelection()
        }
    } Else {
        DestroyWindow(hSelWnd)

        If (g_Control != "" && g[g_Control].ClassNN == "") {
            g_Control := GetParent(g_Control)
        }

        If (IsWindowVisible(hPropWnd)) {
            GoSub ShowProperties
        }
    }

    If (g[g_Control].Type == "Tab2") {
        Return
    }

    Return 0
}

OnWM_LBUTTONDBLCLK(wParam, lParam, msg, hWnd) {
    If (hWnd == hAutoWnd) {
        NewTab()
        Return
    }

    If (GetActiveWindow() != hChildWnd) {
        Return
    }

    MouseGetPos,,,, g_Control, 2
    If (g_Control == "") {
        GoSub ChangeTitle
    } Else If (g_Control == hChildToolbar){
        GoSub ShowToolbarEditor
    } Else {
        g_Control := g[g_Control].ClassNN == "" ? GetParent(g_Control) : g_Control
        GoSub ChangeText
    }

    Return 0
}

OnWM_MBUTTONDOWN(wParam, lParam, msg, hWnd) {
    MouseGetPos,,, hGui, g_Control, 2

    If (hGui == hChildWnd) {
        If (g_Control != "" && g[g_Control].ClassNN == "") {
            g_Control := GetParent(g_Control) ; For ComboBox and ActiveX
        }

        GoSub ShowProperties
    }

    Return
}

OnWM_RBUTTONDOWN(wParam, lParam, msg, hWnd) {
    g_X := lParam & 0xFFFF
    g_Y := lParam >> 16

    If (hWnd == hChildToolbar) {
        Menu ChildToolbarMenu, Add, Edit, ShowToolbarEditor
        Menu ChildToolbarMenu, Add, Delete, DeleteToolbar
        Menu ChildToolbarMenu, Show
        Return
    }

    MouseGetPos,,, g_Gui, g_Control, 2
    If (g_Gui != hChildWnd) {
        If (hWnd == hTab) {
            g_TabIndex := TabHitTest(hTab, lParam & 0xFFFF, lParam >> 16)
            ShowTabContextMenu()
        }
        Return
    }

    If (g[g_Control].Type == "Tab2") {
        VarSetCapacity(RECT, 16, 0)
        DllCall("GetClientRect", "Ptr", g_Control, "Ptr", &RECT)
        SendMessage 0x1328, 0, &RECT,, ahk_id %g_Control% ; TCM_ADJUSTRECT
        tiy := NumGet(RECT, 4, "Int")
        ControlGetPos,, ty,,,, ahk_id %g_Control%
        If (g_Y > (tiy + ty)) {
            g_Control := ""
        }
    }

    If (g_Control == "") {
        Menu WindowContextMenu, Show
    } Else {
        If (g[g_Control].Handle == "") {
            g_Control := GetParent(g_Control) ; For ComboBox and ActiveX
        }
        ShowContextMenu()
    }
    Return 0
}

OnWM_KEYDOWN(wParam, lParam, msg, hWnd) {
    hActiveWnd := WinExist("A")

    ShiftP := GetKeyState("Shift", "P")
    CtrlP := GetKeyState("Ctrl", "P") && !GetKeyState("vkA5", "P")

    ; Preview window
    If (hActiveWnd == hChildWnd) {
        If (ShiftP) {
            If (wParam == 37) { ; Shift + Left
                ResizeByKey("Left")
                Return False
            } Else If (wParam == 38) { ; Shift + Up
                ResizeByKey("Up")
                Return False
            } Else If (wParam == 39) { ; Shift + Right
                ResizeByKey("Right")
                Return False
            } Else If (wParam == 40) { ; Shift + Down
                ResizeByKey("Down")
                Return False
            }
        }

        If (wParam == 37) { ; Left
            MoveByKey("Left")
            Return False
        } Else If (wParam == 38) { ; Up
            MoveByKey("Up")
            Return False
        } Else If (wParam == 39) { ; Right
            MoveByKey("Right")
            Return False
        } Else If (wParam == 40) { ; Down
            MoveByKey("Down")
            Return False
        } Else If (wParam == 46) { ; Del
            DeleteSelectedControls()
        } Else If (wParam == 65 && CtrlP) { ; ^A
            SelectAllControls()
        } Else If (wParam == 113) { ; F2
            Gosub ChangeText
        } Else If (wParam == 114) { ; F3
            BlinkBorder(g_Control)
            Return False
        } Else If (wParam == 93) { ; AppsKey
            Menu WindowContextMenu, Show
        }

    ; Main window
    } Else If (hActiveWnd == hAutoWnd) {
        If (CtrlP) {
            If (wParam == 13) { ; Ctrl+Enter
                AutoComplete(1)
                Return False
            } Else If (wParam == 32) { ; Ctrl+Space
                WordPos := GetCurrentWord(Word)
                Calltip := GetCalltip(Word)
                ShowCalltip(TabEx.GetSel(), Calltip, WordPos[1])
                Return False
            } Else If (wParam == 0x6B) { ; ^Numpad+
                ZoomIn()
                Return False
            } Else If (wParam == 0x6D) { ; ^Numpad-
                ZoomOut()
                Return False
            } Else If (wParam == 0x60) { ; ^Numpad0
                ResetZoom()
                Return False
            } Else If (ShiftP && wParam == 0x26) { ; Ctrl + Shift + Up arrow key
                MoveLineUp()
                Return False
            } Else If (ShiftP && wParam == 0x28) { ; Ctrl + Shift + Down arrow key
                MoveLineDown()
                Return False
            } Else If (wParam == 0x28) { ; Ctrl + Down arrow key
                DuplicateLine()
                Return False
            }
        }

        If (wParam == 113) { ; F2
            ToggleBookmark()
            Return False
        } Else If (wParam == 114) { ; F3
            If (ShiftP) {
                GoSub FindPrev
            } Else {
                GoSub FindNext
            }
            Return False
        } Else If (wParam == 0x2D) { ; Insert
            If (CtrlP) {
                InsertCalltip()
                Return False
            } Else {
                g_Insert := !g_Insert
                If (g_Insert) {
                    SB_SetText("Insert", 4)
                } Else {
                    SB_SetText("Overstrike", 4)
                }
            }
        } Else If (wParam == 27) { ; Esc
            n := TabEx.GetSel()
            If (g_AutoCEnabled && Sci[n].AutoCActive()) {
                Sci[n].CallTipCancel() ; ?
                g_AutoCEnabled := False
                SetTimer SuspendAutoComplete, -3000
                Return False
            }

            hCursor := DllCall("GetCursor", "Ptr")
            If (hCursor == hCursorDragMove) {
                DllCall("ReleaseCapture")
            }
        }

    } Else If (hActiveWnd == hAddMenuItemDlg) {
        ControlGetFocus FocusedControl, ahk_id %hAddMenuItemDlg%
        If (FocusedControl == "msctls_hotkey321") {
            ReservedKeys := {8: "Backspace", 13: "Enter", 27: "Esc", 32: "Space", 46: "Del"}
            If ReservedKeys.HasKey(wParam) {
                GuiControl,, msctls_hotkey321, % ReservedKeys[wParam]
                Return False
            }
            Return
        }

    } Else If (hActiveWnd == hFindReplaceDlg) {
        If (CtrlP && wParam == 9) {
            GuiControlGet CurrentTab, FindReplaceDlg:, SysTabControl321
            GuiControl FindReplaceDlg: Choose, SysTabControl321, % (CurrentTab == 1) ? 2 : 1
            GoSub FindReplaceTabHandler
            Return False
        }

    } Else If (hActiveWnd == hVarListWnd) {
        If (wParam == 13) {
            GoSub ModifyVariable
            Return False
        }
    }

    ; Any window
    If (CtrlP) {
        If (wParam == 120) { ; ^F9
            GoSub RunSelectedText
            Return False

        } Else If (wParam == 80) { ; ^P
            GoSub ShowProperties
            Return False

        } Else If (wParam == 78) { ; ^N
            NewTab()
            Return False

        } Else If (wParam == 87) { ; ^W
            GoSub CloseTab
            Return False

        } Else If (wParam == 79) { ; ^O
            Open()
            Return False

        } Else If (ShiftP && wParam == 83) { ; ^+S
            SaveAs(TabEx.GetSel())
            Return False

        } Else If (wParam == 83) { ; ^S
            Save(TabEx.GetSel())
            Return False

        } Else If (wParam == 73) { ; ^I
            GoSub ImportGUI
            Return False

        } Else If (wParam == 9) { ; Ctrl+Tab
            NextTab := TabEx.GetSel()
            If (ShiftP) {
                NextTab := (NextTab == 1) ? TabEx.GetCount() - 1 : NextTab - 2
            } Else If (NextTab == TabEx.GetCount()) {
                NextTab := 0
            }
            SendMessage 0x1330, NextTab,,, ahk_id %hTab% ; TCM_SETCURFOCUS.
            Sleep 0  ; This line and the next are necessary only for certain tab controls.
            SendMessage, 0x130C, NextTab,,, ahk_id %hTab% ; 0x130C is TCM_SETCURSEL
            GoSub TabHandler
            Return False

        } Else If (wParam == 0x74) { ; ^F5
            GoSub DebugRunToCursor ; Untested
            Return False

        } Else If (wParam == 71) { ; ^G
            ShowGoToLineDialog()
            Return False
        }
    }

    If (ShiftP && wParam == 117) { ; Shift+F6
        GoSub StepOut
        Return False
    }

    If (wParam == 120) { ; F9
        RunScript()
        Return False

    } Else If (wParam == 116) { ; F5
        DebugRun()
        Return False

    } Else If (wParam == 117) { ; F6
        GoSub StepInto
        Return False

    } Else If (wParam == 0x70) { ; F1
        OpenHelpFile(GetSelectedText())
        Return False

    } Else If (wParam == 0x7A) { ; F11
        ShowChildWindow()
        Return False

    } Else If (wParam == 0x7B) { ; F12
        If (DesignMode) {
            GoSub SwitchToEditorMode
        } Else {
            GoSub SwitchToDesignMode
        }
        Return False

    } Else If (wParam == 0x77) { ; F8
        GoSub DebugStop
        Return False

    } Else If (wParam == 115) { ; F4
        ToggleBreakpoint()
        Return False

    } Else If (wParam == 19) { ; Pause/Break
        GoSub DebugBreak
        Return
    }
}

OnWM_SYSKEYDOWN(wParam, lParam, msg, hWnd) {
    If (WinExist() == hAddMenuItemDlg) {
        Return
    }

    If (wParam == 120) { ; Alt+F9
        RunScript(4)
        Return False
    } Else If (wParam == 116) { ; Alt+F5
        DebugRun(1)
        Return False
    } Else If (wParam == 0x79) { ; F10
        If (IsWindowVisible(hPropWnd)) {
            ShowWindow(hPropWnd, 0)
        } Else {
            GoSub ShowProperties
        }
        Return False
    } Else If (wParam == 71) { ; Alt+G
        GoSub NewGUI
        Return False
    }
}

OnWM_KEYUP(wParam) {
    If (WinExist() == hChildWnd) {
        If (wParam == 17) {
            g_Cross := False
            DllCall("SetCursor", "UInt", DllCall("LoadCursor", "UInt", 0, "UInt", 32512)) ; IDC_ARROW
        }

        ; Restore the selection after moving controls with the arrow keys
        If (wParam >= 37 && wParam <= 40) {
            GenerateCode()
            UpdateSelection()
        }
    }
}

ShowChildWindow:
    ShowChildWindow()
Return

; -1: Toggle, 0: Hide, 1: Show
ShowChildWindow(Param := -1) {
    If (!g_GuiTab) {
        Return
    }

    If (Param == -1) {
        Param := !IsWindowVisible(hChildWnd)
    }

    ShowWindow(hChildWnd, Param)
    ShowWindow(hSelWnd, Param)

    g_GuiSB := Param
    SetStatusBar()
}

SwitchToEditorMode:
    DesignMode := False

    ShowChildWindow(0)
    ShowWindow(hGUIToolbar, 0)
    ShowWindow(hToolBox, 0)
    ShowWindow(hMainToolbar, 1)

    GetClientSize(hAutoWnd, WindowW, WindowH)
    GuiControl Auto: MoveDraw, %hTab%, x0 w%WindowW%

    Sci_GetIdealSize(SciX, SciY, SciW, SciH)
    Loop % Sci.Length() {
        SetWindowPos(Sci[A_Index].hWnd, SciX, SciY, SciW, SciH, 0, 0x14)
    }

    Repaint(hAutoWnd)

    Sci[TabEx.GetSel()].GrabFocus()

    SetStatusBar()

    CheckMenuRadioItem(MenuGetHandle("AutoViewMenu"), 1, 0, 1)
Return

SwitchToDesignMode:
    DesignMode := True

    If (g_GuiTab == TabEx.GetSel()) {
        ShowWindow(hChildWnd, 1)
    }

    ShowWindow(hToolBox, 1)
    ShowWindow(hMainToolbar, 0)
    ShowWindow(hGUIToolbar, 1)
    SendMessage TB_CHECKBUTTON, 1060, 1,, ahk_id %hGUIToolbar%

    Gui Auto: Default
    GetClientSize(hAutoWnd, WindowW, WindowH)
    GuiControlGet ToolBox, Pos, %hToolBox%
    SplitterW := (g_TabBarStyle == 1 ? g_SplitterW : g_SplitterW - 2)
    GuiControl MoveDraw, %hTab%, % "x" . (ToolBoxW + SplitterW) . " w" . (WindowW - ToolboxW - SplitterW)

    Sci_GetIdealSize(SciX, SciY, SciW, SciH)
    Loop % Sci.Length() {
        SetWindowPos(Sci[A_Index].hWnd, SciX, SciY, SciW, SciH, 0, 0x14)
    }

    Repaint(hAutoWnd)

    SetStatusBar()

    CheckMenuRadioItem(MenuGetHandle("AutoViewMenu"), 0, 0, 1)
Return

InsertControl:
    AddControl(A_ThisMenuItem)
    g_Adding := False
Return

BlinkBorder:
    BlinkBorder(g_Control)
Return

BlinkBorder(hWnd, Duration := 500, Color := "0x3FBBE3", BorderSize := 4) {
    Local X, Y, W, H, Index, r

    VarSetCapacity(RECT, 16, 0)
    DllCall("GetWindowRect", "Ptr", hWnd ? hWnd : hChildWnd, "Ptr", &RECT)
    X := NumGet(RECT, 0, "Int")
    Y := NumGet(RECT, 4, "Int")
    w := NumGet(RECT, 8, "Int") - X
    H := NumGet(RECT, 12, "Int") - Y

    Loop 4 {
        Index := A_Index + 90
        Gui %Index%: -Caption +ToolWindow +AlwaysOnTop
        Gui %Index%: Color, %Color%
    }

    r := BorderSize
    Gui 91: Show, % "NA x" (x - r) " y" (y - r) " w" (w + r + r) " h" r
    Gui 92: Show, % "NA x" (x - r) " y" (y + h) " w" (w + r + r) " h" r
    Gui 93: Show, % "NA x" (x - r) " y" y " w" r " h" h
    Gui 94: Show, % "NA x" (x + w) " y" y " w" r " h" h

    Sleep %Duration%

    Loop 4 {
        Index := A_Index + 90
        Gui %Index%: Destroy
    }
}

RecreateFromScript() {
    n := TabEx.GetSel()
    Sci[n].GetText(Sci[n].GetLength() + 1, SciText)
    GoSub NewGUI
    ParseScript(SciText)
}

ImportGUI:
    GoSub ShowImportGUIDialog
Return

Open(Files := "", Flag := 0) {
    If (!Files.MaxIndex()) {
        Gui Auto: +OwnDialogs
        FileSelectFile Files, M3, %OpenDir%, Open
        If (ErrorLevel) {
            Return
        } Else {
            TempList := StrSplit(Files, "`n")
            BasePath := RTrim(TempList.RemoveAt(1), "\") ; RTrim for root folders

            Files := []
            For Each, FileName in TempList {
                Files.Push(BasePath . "\" . FileName)
            }
        }
    }

    For Each, File in Files {
        ;OutputDebug %A_ThisFunc%: %File%

        n := IsFileOpened(File)
        If (n && Flag != 2) { ; 2 = reopen
            TabEx.SetSel(n)
            Continue
        }

        _Open:
        Try {
            fOpen := FileOpen(File, "r")
            fRead := fOpen.Read()
            ;fEncoding := fOpen.Encoding
            fOpen.Close()
        } Catch e {
            MsgBox 0x16
            , Error %A_LastError%
            , % ((File != "") ? File . "`n" : "") . e.Message . "`n" . e.Extra
            IfMsgBox TryAgain, {
                GoTo _Open
            } Else IfMsgBox Continue, {
                Continue
            } Else {
                Return
            }
        }

        SplitPath File, FileName, OpenDir, FileExt

        If (Flag == 1 && FileExt = "ahk") {
            Gosub NewGUI
            ParseScript(fRead) ; Import GUI
        } Else {
            n := TabEx.GetSel()
            If (Flag == 0 && (n == g_GuiTab || Sci[n].GetModify() || Sci[n].FileName != "")) {
                n := NewTab()
            } Else {
                SetWindowTitle(File)
            }

            TabEx.SetText(n, FileName)

            If (FileExt = "ahk") {
                TabEx.SetIcon(n, 2)
            } Else {
                Sci[n].SetLexer(0)
            }

            Sci[n].FullName := File
            Sci[n].FileName := FileName
            Sci[n].SetText("", fRead, 1)
            Sci[n].SetSavePoint()
            ;Sci[n].Encoding := fEncoding

            If (Flag == 0) {
                Sci[n].EmptyUndoBuffer()
            }

            FileGetTime Timestamp, %File%
            Sci[n].Timestamp := Timestamp
        }

        fRead := ""

        AddToRecentFiles(File)
    }
}

SaveAs:
    SaveAs(TabEx.GetSel())
Return

SaveAs(n) {
    TabEx.SetSel(n)

    StartPath := (Sci[n].FileName != "") ? Sci[n].FullName : SaveDir
    Filter := "AutoHotkey Scripts (*.ahk)"
    Gui Auto: +OwnDialogs
    FileSelectFile SelectedFile, S16, %StartPath%, Save, %Filter%
    If (ErrorLevel) {
        Return
    }

    SplitPath SelectedFile, FileName,, Extension
    If (Extension == "" && !FileExist(SelectedFile . ".ahk")) {
        FileName .= ".ahk"
        SelectedFile .= ".ahk"
        Extension := "ahk"
    }

    Sci[n].FullName := SelectedFile
    Sci[n].FileName := FileName

    If (Extension != "ahk") {
        Sci[n].SetLexer(0)
        DisableSyntaxHighlighting(n)
    } Else If (Sci[n].GetLexer() != 200) {
        Sci_Config(n)
    }

    SetWindowTitle(SelectedFile)

    Return Save(n)
}

Save(n) {
    If (Sci[n].FileName == "") {
        Return SaveAs(n)
    }

    SciText := GetText(n)
    FullName := Sci[n].FullName

    ; Backup a copy of the file before saving
    If (g_BackupOnSave) {
        If (BackupDirCreated()) {
            TempName := GetTempFileName(g_BackupDir, "ahk.tmp")
            If (FileExist(FullName)) {
                FileCopy %FullName%, %TempName%, 1
            } Else {
                FileAppend %SciText%, %TempName%
            }
        }
    }

    FileDelete %FullName%
    FileAppend %SciText%, %FullName%
    If (ErrorLevel) {
        Gui Auto: +OwnDialogs
        MsgBox 0x10, AutoGUI, Error saving %FullName%
        SetWindowTitle("Error saving file: " . FullName)
        Return False
    }

    Sci[n].SetSavePoint()

    ; SetDocumentStatus operates in the current tab only
    TabTitle := TabEx.GetText(n)
    If (InStr(TabTitle, "*")) {
        TabEx.SetText(n, Sci[n].FileName)
        ;Repaint(hAutoWnd) ; ?
    }

    SplitPath FullName,, SaveDir, FileExt
    If (FileExt = "ahk") {
        TabEx.SetIcon(n, 2)
    } Else If (g_GuiTab != n) {
        TabEx.SetIcon(n, 1)
    }

    If (g_GuiTab == n) {
        CopyLibraries(SaveDir)
    }

    AddToRecentFiles(FullName)

    Repaint(Sci[n].hWnd) ; ?

    FileGetTime Timestamp, %FullName%
    Sci[n].Timestamp := Timestamp

    Return True
}

SaveAll:
    Loop % Sci.Length() {
        If (Sci[A_Index].GetModify()) {
            Save(A_Index)
        }
    }
Return

SaveCopy:
    n := TabEx.GetSel()
    If (Sci[n].FileName != "") {
        SplitPath % Sci[n].FullName,, Dir, Extension, NameNoExt
        StartPath := Dir . "\" . NameNoExt . " - Copy." . Extension
    } Else {
        StartPath := SaveDir
    }

    Filter := "AutoHotkey Scripts (*.ahk)"
    Gui Auto: +OwnDialogs
    FileSelectFile SelectedFile, S16, %StartPath%, Save a Copy, %Filter%
    If (ErrorLevel) {
        Return
    }

    SplitPath SelectedFile,,, Extension
    If (Extension == "" && Sci[n].GetLexer() == 200 && !FileExist(SelectedFile . ".ahk")) {
        SelectedFile .= ".ahk"
    }

    nLen := Sci[n].GetText(Sci[n].GetLength() + 1, SciText)
    Sci[n].GetText(nLen + 1, SciText)

    FileDelete %SelectedFile%
    FileAppend %SciText%, %SelectedFile%
    If (ErrorLevel) {
        Gui Auto: +OwnDialogs
        MsgBox 0x10, AutoGUI, Error saving %SelectedFile%
    }
Return

CopyLibraries(Dir) {
    If (g.Anchor) {
        Source := A_ScriptDir . "\Lib\AutoXYWH.ahk"
        Destination := Dir . "\AutoXYWH.ahk"
        FileCopy %Source%, %Destination%
    }

    If (ToolbarExist()) {
        Source := A_ScriptDir . "\Lib\Toolbar.ahk"
        Destination := Dir . "\Toolbar.ahk"
        If (Dir == A_Temp) {
            FileGetSize Size, %Dir%\Toolbar.ahk
            Overwrite := (Size > 40000) ? 1 : 0
        } Else {
            Overwrite := 0
        }
        FileCopy %Source%, %Destination%, %Overwrite%
    }
}

RunScript:
    RunScript(A_ThisMenuItemPos)
Return

RunScript(Mode := 1) {
    n := TabEx.GetSel()
    Size := Sci[n].GetLength()
    If (Size == 0) {
        Return
    }

    AhkPath := (GetKeyState("Shift", "P") || Mode == 2) ? g_AhkPath3264 : A_AhkPath

    Sci[n].GetText(Size + 1, SciText)

    If (Mode == 5) { ; Run Selected Text (Ctrl+F9)
        Text := GetSelectedText()
        If (Text == "") {
            Text := SciText
        }
        ExecScript(Text, g_Parameters, AhkPath)
        Return
    }

    ; Alternative run (Alt+F9)
    If (Mode == 4) {
        If ((AhkPath := GetAltRun()) == "") {
            Return
        }
    }

    If (Sci[n].FileName != "") {
        If (Sci[n].GetModify()) {
            If (!Save(n)) {
                Return
            }
        }
        File := Sci[n].FullName

        SplitPath File,, Path
    } Else {
        ; Unsaved scripts run from the Temp folder
        File := A_Temp . "\Temp.ahk"
        Path := A_Temp
        FileDelete %File%
        FileAppend %SciText%, %File%
        CopyLibraries(Path)
    }

    Run % AhkPath . " """ . File . """ " . g_Parameters, %Path%
}

RunSelectedText:
    RunScript(5)
Return

GetAltRun() {
    If (FileExist(g_AltAhkPath)) {
        Return g_AltAhkPath
    } Else {
        FileSelectFile g_AltAhkPath, 3, %A_AhkPath%, Browse, Executable Files (*.exe)
        If (ErrorLevel) {
            Return
        }
        Return g_AltAhkPath
    }
}

ShowParamsDlg:
    Info := "Parameters are stored in the variables %1%, %2%, and so on.`n"
         .  "They are also stored as an array in the built-in variable A_Args.`n"
         .  "See the online <a href=""https://autohotkey.com/docs/Scripts.htm#cmd"">help topic</a> for details."

    Temp := InputBoxEx("Script Parameters", Info, "Command Line Parameters", g_Parameters, "", "", hAutoWnd, 440, "", IconLib, 91)

    If (!ErrorLevel) {
        g_Parameters := Temp
    }
Return

RunFileDlg() {
    hModule := DllCall("GetModuleHandle", "Str", "shell32.dll", "Ptr")
    RunFileDlg := DllCall("GetProcAddress", "UInt", hModule, "UInt", 61, "Ptr")
    DllCall(RunFileDlg, "Ptr", hAutoWnd, "Ptr", 0, "Ptr", 0, "Ptr", 0, "Ptr", 0, "UInt", 0)
}

Compile() {
    SplitPath A_AhkPath,, AhkBasePath
    Ahk2ExePath := AhkBasePath . "\Compiler\Ahk2Exe.exe"

    Try {
        Run %Ahk2ExePath%,,, PID
    }

    ; Not working on Windows 10
    n := TabEx.GetSel()
    If (Sci[n].FullName && !Sci[n].GetModify()) {
        SplitPath % Sci[n].FullName,, Dir,, NameNoExt

        SetBatchLines 20ms
        Sleep 100

        WinWait Ahk2Exe ahk_pid %PID%
        WinGet hWnd, ID, Ahk2Exe ahk_pid %PID%
        WinActivate ahk_id %hWnd%
        WinWaitActive ahk_id %hWnd%

        Control Enable,, Edit1, % "ahk_id " . hWnd
        If (!ErrorLevel) {
            ControlSetText Edit1, % Sci[n].FullName, ahk_id %hWnd%
        }

        If (!FileExist(ExeFile := Dir . "\" . NameNoExt . ".exe")) {
            Control Enable,, Edit2, % "ahk_id " . hWnd
            If (!ErrorLevel) {
                ControlSetText Edit2, %ExeFile%, ahk_id %hWnd%
            }
        }

        SetBatchLines -1
    }
}

AddMenu(MenuName, MenuItemName := "", Subroutine := "MenuHandler", Icon := "", IconIndex := 0) {
    Menu, %MenuName%, Add, %MenuItemName%, %Subroutine%

    If (Icon != "") {
        Menu, %MenuName%, Icon, %MenuItemName%, %Icon%, %IconIndex%
    }
}

MenuHandler:
    Gui Auto: +OwnDialogs
    MsgBox 0x40, AutoGUI, Not implemented yet.
Return

AddToRecentFiles(FileName) {
    Static RecentFilesMenu := 0, MaxItems := 15

    If !(FileExist(FileName)) {
        Return
    }

    ; Determine the handle of the Recent Files menu
    If !(RecentFilesMenu) {
        hAutoMenu := GetMenu(hAutoWnd)
        hFileMenu := GetSubMenu(hAutoMenu, 0)
        FileMenuCount := GetMenuItemCount(hFileMenu)
        Loop %FileMenuCount% {
            If (GetMenuString(hFileMenu, A_Index - 1) = "Recent &Files") {
                RecentFilesMenuPos := A_Index - 1
                Break
            }
        }
        RecentFilesMenu := GetSubMenu(hFileMenu, RecentFilesMenuPos)
    }

    MaxIndex := RecentFiles.Length()
    Loop %MaxIndex% {
        ; The drive letter may be uppercase or lowercase
        If (FileName = RecentFiles[A_Index]) {
            Try {
                Menu AutoRecentMenu, Delete, %FileName%
            }
            RecentFiles.RemoveAt(A_Index)
            Break
        }
    }
    RecentFiles.Push(FileName)

    Menu AutoFileMenu, Enable, Recent &Files
    Menu AutoRecentMenu, Insert, 1&, %FileName%, OpenRecentFile
    Try {
        Menu AutoRecentMenu, Icon, %FileName%, % "HICON:" . GetFileIcon(FileName)
    }
    Menu AutoFileMenu, Add, Recent &Files, :AutoRecentMenu

    ItemCount := GetMenuItemCount(RecentFilesMenu)
    If (ItemCount > MaxItems) {
        DeleteMenu(RecentFilesMenu, ItemCount - 1)
        RecentFiles.Remove(1)
    }
}

OpenRecentFile:
    Open([A_ThisMenuItem])
Return

LoadRecentFiles() {
    IniRead Recent, %IniFile%, Recent
    If (Recent != "ERROR") {
        Loop Parse, Recent, `n
        {
            RecentFile := SubStr(A_LoopField, InStr(A_LoopField, "=") + 1)
            AddToRecentFiles(RecentFile)
        }
    }
}

A_Variables:
Constantine:
Expressive:
ScriptsManager:
    Run %A_ScriptDir%\Tools\%A_ThisLabel%.ahk, Tools
Return

HelpMenuHandler:
    If (A_ThisMenuItem == "AutoHotkey &Help File`tF1") {
        Run %g_HelpFile%
        Return
    }

    Node := g_HelpMenuXMLObj.selectSingleNode("//MenuItem[@name=""" . A_ThisMenuItem . """]")
    URL := Node.getAttribute("url")
    If (SubStr(URL, 1, 1) == "/") {
        Run HH mk:@MSITStore:%g_HelpFile%::%URL%
    } Else {
        Try {
            Run %URL%
        }
    }
Return

ShowAbout:
    Gui About: New, LabelAbout -MinimizeBox OwnerAuto
    Gui Color, White
    Gui Add, Picture, x9 y10 w64 h64, %IconLib%
    Gui Font, s20 W700 Q4 c00ADEF, Verdana
    Gui Add, Text, x80 y8 w200, AutoGUI
    Gui Font
    Gui Font, s9, Segoe UI
    Gui Add, Text, x214 y23, v%Version%
    FileGetVersion SciVer, %SciLexer%
    Gui Add, Text, x81 y41, Scintilla %SciVer%
    Gui Add, Text, x81 y58 w200 +0x4000, % "AutoHotkey " . A_AhkVersion . " " . (A_IsUnicode ? "Unicode" : "ANSI") . " " . (A_PtrSize == 8 ? "64-bit" : "32-bit")
    Gui Add, Text, x0 y102 w294 h48 -Background
    Gui Add, Link, x16 y118 -Background, <a href="https://autohotkey.com">autohotkey.com</a>
    Gui Add, Button, gAboutClose x203 y115 w80 h23 Default, OK
    Gui Show, w294 h150, About
    ControlFocus Button1, About
    Gui +LastFound
    SendMessage 0x80, 0, DllCall("LoadIcon", "UInt", 0, "UInt", 32516) ; WM_SETICON, ICON_SMALL, OIC_INFORMATION
    SetModalWindow(True)
Return

AboutEscape:
AboutClose:
    SetModalWindow(False)
    Gui About: Destroy
Return

ShowContextMenu:
    g_Control := Properties_GetHandle()
    ShowContextMenu()
Return

ShowContextMenu() {
    AhkName := g[g_Control].Type
    Options := StrSplit(g[g_Control].Options, A_Space)

    Try {
        Menu ControlOptionsMenu, DeleteAll
    } Catch {
        Menu ControlOptionsMenu, DeleteAll
    }

    If (g[g_Control].Extra == "Command Link") {
        AhkName := "CommandLink"
    }

    Items := Default[AhkName].Menu

    If (AhkName == "ListView") {
        LVItems := ["Report", "List", "Icons", "Small Icons", "Tile"]
        For Each, Item in LVItems {
            Menu LVViewMenu, Add, %Item%, SetListViewMode
            If (Item == "Small Icons") {
                ItemValue := "IconSmall"
            } Else If (Item == "Icons") {
                ItemValue := "Icon"
            } Else {
                ItemValue := Item
            }
            Loop % Options.MaxIndex() {
                If (Options[A_Index] = ItemValue) {
                    Menu LVViewMenu, Check, %Item%
                    Break
                }
            }
        }
        Menu ControlOptionsMenu, Add, View Mode, :LVViewMenu
    }

    If AhkName in Text,GroupBox,Edit
    {
        For Each, Item in ["Left", "Center", "Right"] {
            Menu AlignMenu, Add, %Item%, AlignText
            Loop % Options.MaxIndex() {
                If (Options[A_Index] = Item) {
                    Menu AlignMenu, Check, %Item%
                }
            }
        }
        Menu ControlOptionsMenu, Add, Text Alignment, :AlignMenu
    }

    For Each, Item in Items {
        Menu ControlOptionsMenu, Add, %Item%, SetOption
        Loop % Options.MaxIndex() {
            If (Options[A_Index] = ControlOptions[Item]) {
                Menu ControlOptionsMenu, Check, %Item%
            }
        }
    }

    If (g[g_Control].Extra == "Explorer") {
        Menu ControlOptionsMenu, Check, Explorer Theme
    }

    If (Items[1] == "None") {
        Menu ControlOptionsMenu, Uncheck, None
    }

    If (A_Gui == "Properties" || A_Gui == "Auto") {
        ControlGetPos x, y,, h,, ahk_id%hOptionsBtn%
        Menu ControlOptionsMenu, Show, %x%, % (y + h)
    } Else {
        Menu ControlContextMenu, Show
    }

    Try {
        Menu LVViewMenu, Delete
    }

    Try {
        Menu AlignMenu, Delete
    }
}

ShowTabContextMenu() {
    Action := FileExist(Sci[g_TabIndex].FullName) ? "Enable" : "Disable"
    Menu TabContextMenu, %Action%, Open Folder in Explorer
    Menu TabContextMenu, %Action%, Copy Path to Clipboard
    Menu TabContextMenu, %Action%, Open in a New Window
    Menu TabContextMenu, %Action%, File Properties
    Menu TabContextMenu, Show
}

OpenFolder() {
    Filename := Sci[g_TabIndex].FullName
    If (FileExist(Filename)) {
        Run *open explorer.exe /select`,"%Filename%"
    }
}

CopyFilePath:
    Clipboard := Sci[g_TabIndex].FullName
Return

ShowFileProperties:
    Run % "Properties " . Sci[g_TabIndex].FullName
Return

SetWindowTitle(FileName := "") {
    If (FileName != "") {
        WinSetTitle ahk_id%hAutoWnd%,, % AppName . " v" . Version . " - " . FileName
    } Else {
        WinSetTitle ahk_id%hAutoWnd%,, %AppName% v%Version%
    }
}

OnWM_CTLCOLORSTATIC(wParam, lParam) {
    If (IsResizer(lParam)) {
        DllCall("SetBkColor", "Ptr", wParam, "UInt", 0)
        Return ResizerBrush
    }
}

OnWM_SETCURSOR(wParam, lParam, Msg, hWnd) {
    If (Cursors[wParam]) {
        hCursor := DllCall("LoadCursor", "UInt", 0, "UInt", Cursors[wParam])
        DllCall("SetCursor", "UInt", hCursor)
        Return True
    }

    If (!g_Adding) {
        LButtonP := GetKeyState("LButton", "P")
        If (hWnd == hChildWnd && wParam != hChildWnd && LButtonP) {
            hCursor := DllCall("LoadCursor", "UInt", 0, "UInt", 32646) ; IDC_SIZEALL
            DllCall("SetCursor", "UInt", hCursor)
            Return True
        }
    }
}

OnWM_LBUTTONUP(wParam, lParam, msg, hWnd) {
    g_LButtonDown := 0
    g_Adding := False
}

MoveByKey(Direction) {
    DestroyWindow(hSelWnd)
    HideResizers()

    Selection := GetSelectedItems()

    Inc := (GetKeyState("Ctrl", "P")) ? GridSize : 1

    If (Direction == "Left") {
        For Each, Item in Selection {
            GuiControlGet p, %Child%: Pos, %Item%
            GuiControl %Child%: MoveDraw, %Item%, % "x" . px - Inc
        }
    } Else If (Direction == "Up") {
        For Each, Item in Selection {
            GuiControlGet p, %Child%: Pos, %Item%
            GuiControl %Child%: MoveDraw, %Item%, % "y" . py - Inc
        }
    } Else If (Direction == "Right") {
        For Each, Item in Selection {
            GuiControlGet p, %Child%: Pos, %Item%
            GuiControl %Child%: MoveDraw, %Item%, % "x" . px + Inc
        }
    } Else If (Direction == "Down") {
        For Each, Item in Selection {
            GuiControlGet p, %Child%: Pos, %Item%
            GuiControl %Child%: MoveDraw, %Item%, % "y" . py + Inc
        }
    }
}

ResizeByKey(Direction) {
    DestroyWindow(hSelWnd)
    HideResizers()

    Selection := GetSelectedItems()

    Inc := (GetKeyState("Ctrl", "P")) ? GridSize : 1

    If (Direction == "Left") {
        For Each, Item in Selection {
            GuiControlGet p, %Child%: Pos, %Item%
            GuiControl %Child%: MoveDraw, %Item%, % "w" . pw - Inc
        }
    } Else If (Direction == "Up") {
        For Each, Item in Selection {
            GuiControlGet p, %Child%: Pos, %Item%
            GuiControl %Child%: MoveDraw, %Item%, % "h" . ph - Inc
        }
    } Else If (Direction == "Right") {
        For Each, Item in Selection {
            GuiControlGet p, %Child%: Pos, %Item%
            GuiControl %Child%: MoveDraw, %Item%, % "w" . pw + Inc
        }
    } Else If (Direction == "Down") {
        For Each, Item in Selection {
            GuiControlGet p, %Child%: Pos, %Item%
            GuiControl %Child%: MoveDraw, %Item%, % "h" . ph + Inc
        }
    }
}

SetModalWindow(Modal := True) {
    Global
    If (Modal) {
        Gui Auto: +Disabled
        Gui %Child%: +Disabled
        Gui Properties: +Disabled
        OnMessage(0x100, "")
        OnMessage(0x104, "")
    } Else {
        Gui Auto: -Disabled
        Gui %Child%: -Disabled
        Gui Properties: -Disabled
        OnMessage(0x100, "OnWM_KEYDOWN")
        OnMessage(0x104, "OnWM_SYSKEYDOWN")
    }
}

GetControlType(ControlName) { ; ControlName: display name (as in the toolbox)
    Static Types := {0:0
,   "Date Time Picker": "DateTime"
,   "Edit Box": "Edit"
,   "Hotkey Box": "Hotkey"
,   "Month Calendar": "MonthCal"
,   "Progress Bar": "Progress"
,   "Radio Button": "Radio"
,   "Status Bar": "StatusBar"
,   "Tab": "Tab2"
,   "Custom Class": "Custom"
,   "Command Link": "CommandLink"}
    Return (Types[ControlName] != "") ? Types[ControlName] : ControlName
}

SuspendAutoComplete:
    g_AutoCEnabled := True
Return

SendData(ByRef String, ByRef hWnd) {
    VarSetCapacity(COPYDATASTRUCT, 3 * A_PtrSize, 0)
    cbSize := (StrLen(String) + 1) * (A_IsUnicode ? 2 : 1)
    NumPut(cbSize, COPYDATASTRUCT, A_PtrSize)
    NumPut(&String, COPYDATASTRUCT, 2 * A_PtrSize)
    SendMessage 0x4A, 0, &COPYDATASTRUCT,, ahk_id %hWnd%
    Return ErrorLevel
}

OnWM_COPYDATA(wParam, lParam, msg, hWnd) {
    Data := StrGet(NumGet(lParam + 2 * A_PtrSize)) ; COPYDATASTRUCT lpData
    Open([Data])
    Return True
}

ShowImportGUIDialog:
    Gui ImportGUIDlg: New, +LabelImportGUIDlg +hWndhImportGUIDlg -MinimizeBox +OwnerAuto
    SetWindowIcon(hImportGUIDlg, IconLib, 40)
    Gui Color, 0xFAFAFA
    Gui Font, s12 c0x003399, Segoe UI
    Gui Add, Text, x12 y12 w409 h21, Select the Import Method
    Gui Font
    Gui Font, s9, Segoe UI
    Gui Add, Text, x12 y39 w498 h23 +0x200
    , Warning: none of these methods preserve the entire script. Do not overwrite the original file.
    Gui Add, Radio, vClone x22 y73 w368 h23 Checked, Clone Window
    Gui Add, Radio, vParse x22 y105 w368 h23, Parse Script (Not Recommended)
    Gui Add, Text, x-1 y146 w525 h48 Border -Background
    Gui Add, Button, gImportGUIDlgOK x343 y158 w80 h23 +Default, &OK
    Gui Add, Button, gImportGUIDlgClose x429 y158 w80 h23, &Cancel
    Gui Show, w523 h193, Import GUI
Return

ImportGUIDlgEscape:
ImportGUIDlgClose:
    Gui ImportGUIDlg: Cancel
Return

ImportGUIDlgOK:
    Gui ImportGUIDlg: Submit

    If (Clone) {
        GoSub ShowCloneDialog
    } Else {
        FileSelectFile FileName, 1, %OpenDir%, Open, AutoHotkey Scripts (*.ahk)
        If (!ErrorLevel) {
            Open([FileName], 1)
        }
    }
Return

OnWM_ENTERMENULOOP(wParam, lParam, msg, hWnd) {
    Return 1 ; Prevent repainting problems on XP?
}

OnWM_INITMENU(wParam) {
    ; OutputDebug % MenuGetName(wParam) ; Always returns "AutoMenuBar"
    Menu AutoFileMenu, % Sci[TabEx.GetSel()].Filename != "" ? "Enable" : "Disable", Open Included File...
    LoadSessionMenu()
}

OnWM_ACTIVATEAPP(wParam, lParam, msg, hWnd) {
    If (wParam) {
        CheckModified()
    }

    Return 0
}

RestoreWindow() {
    WinGet WinState, MinMax, ahk_id %hAutoWnd%
    If (WinState == -1) { ; Minimized
        WinRestore ahk_id %hAutoWnd%
    }
}

CheckModified() {
    n := TabEx.GetSel()

    If (Sci[n].Timestamp == "" || Sci[n].ChangedOutside) {
        Sci[n].ChangedOutside := False
        Return 0
    }

    If (g_CheckTimestamp) {
        ; Check if the file exist
        If (Sci[n].FileName != "" && !FileExist(Sci[n].FullName)) {
            OnMessage(0x1C, "")
            RestoreWindow()
            Gui Auto: +OwnDialogs
            MsgBox 0x40030, AutoGUI, % "File not found: " . Sci[n].FullName
            Sci[n].Timestamp := ""
            OnMessage(0x1C, "OnWM_ACTIVATEAPP")
            Return
        }

        Filename := Sci[n].FullName
        FileGetTime Timestamp, %Filename%

        ; Check if the file has been modified outside
        If (Timestamp != Sci[n].Timestamp) {
            Sci[n].ChangedOutside := True

            OnMessage(0x1C, "")

            RestoreWindow()
            Gui Auto: +OwnDialogs
            MsgBox 0x34, AutoGUI, % Sci[n].Filename . " was modified outside.`nShould the file be reloaded?"
            IfMsgBox Yes, {
                CurrentPos := Sci[n].GetCurrentPos()
                Open([Filename], 2)
                Sci[n].GoToPos(CurrentPos)
            } Else {
                Sci[n].ChangedOutside := False
                Return 0
            }

            OnMessage(0x1C, "OnWM_ACTIVATEAPP")
        }
    }
}

AutoSizeWindow:
    Gui %Child%: Margin, 8, 8
    Gui %Child%: Show, AutoSize
    GenerateCode()
Return

LoadToolsMenu() {
    If (FileExist(A_AppData . "\AutoGUI\Tools.ini")) {
        g_IniTools := A_AppData . "\AutoGUI\Tools.ini"
    } Else {
        g_IniTools := A_ScriptDir . "\Tools\Tools.ini"

        If (!FileExist(g_IniTools)) {
            FileCopy %A_ScriptDir%\Tools\DefaultTools.ini, %A_ScriptDir%\Tools\Tools.ini
            If (ErrorLevel) {
                FileCreateDir %A_AppData%\AutoGUI
                FileCopy %A_ScriptDir%\Tools\DefaultTools.ini, %A_AppData%\AutoGUI\Tools.ini
                g_IniTools := A_AppData . "\AutoGUI\Tools.ini"
            }
        }
    }

    IniRead IniSections, %g_IniTools%

    Loop Parse, IniSections, `n, `r
    {
        IniRead Icon, %g_IniTools%, %A_LoopField%, Icon, %A_Space%
        IniRead IconIndex, %g_IniTools%, %A_LoopField%, IconIndex, 1
        Try {
            AddMenu("AutoToolsMenu", A_LoopField, "RunTool", GetToolIconPath(Icon), IconIndex)
        }
    }

    Menu AutoToolsMenu, Add
    AddMenu("AutoToolsMenu", "Configure Tools...", "ShowToolsDialog", IconLib, 43)
}

RunTool() {
    IniRead File, %g_IniTools%, %A_ThisMenuItem%, File, %A_Space%
    If (!FileExist(File)) {
        If (FileExist(A_ScriptDir . "\Tools\" . File)) {
            File = %A_ScriptDir%\Tools\%File%
        }
    }

    IniRead WorkingDir, %g_IniTools%, %A_ThisMenuItem%, WorkingDir, %A_Space%
    If (WorkingDir == "") {
        SplitPath File,, WorkingDir
    }

    Params := ReadIni(g_IniTools, A_ThisMenuItem, "Params", "")
    If (Params != "") {
        n := TabEx.GetSel()

        If (InStr(Params, "{FILENAME}")) {
            Params := StrReplace(Params, "{FILENAME}", Sci[n].FullName)
        }

        If (InStr(Params, "{FILEDIR}")) {
            SplitPath % Sci[n].FullName,, FileDir
            Params := StrReplace(Params, "{FILEDIR}", FileDir)
        }

        If (InStr(Params, "{SELECTEDTEXT}")) {
            Params := StrReplace(Params, "{SELECTEDTEXT}", GetSelectedText())
        }

        If (InStr(Params, "{AUTOGUIDIR}")) {
            Params := StrReplace(Params, "{AUTOGUIDIR}", A_ScriptDir)
        }
    }

    Try {
        Run "%File%" %Params%, %WorkingDir%
    } Catch {
        Gui Auto: +OwnDialogs
        MsgBox 0x10, %AppName%, Error executing %File%
        GoSub ShowToolsDialog
    }
}

ShowIncludesDialog:
    Gui IncludesDlg: New, +LabelIncludesDlg +hWndhIncludesDlg -MinimizeBox +OwnerAuto
    SetWindowIcon(hIncludesDlg, "shell32.dll", 69)
    Gui Color, White

    Gui Font, s12 cNavy, Segoe UI
    Gui Add, Text, x8 y9 w120 h22 +0x200, List of Includes ; x12 y8
    Gui Font
    Gui Font, s9, Segoe UI
    Gui Add, Text, x8 y32 w285 h20 +0x200, Select the files to be opened.

    Gui Add, ListView, hWndhIncludeList x0 y60 w620 h294 +LV0x14000 +Checked, Filename|Path
    Gui Add, Text, x0 y355 w620 h48 -Background
    Gui Add, Button, gOpenIncludes x433 y366 w84 h24 +Default, &Open
    Gui Add, Button, gIncludesDlgClose x525 y366 w84 h24, &Cancel
    Gui Font
    Gui Show, w620 h402, Open Included File

    LV_ModifyCol(1, 174)
    LV_ModifyCol(2, 425)
    DllCall("UxTheme.dll\SetWindowTheme", "Ptr", hIncludeList, "WStr", "Explorer", "Ptr", 0)

    FullName := Sci[TabEx.GetSel()].FullName
    If (FullName != "") {
        Try {
            EnumIncludes(FullName, Func("EnumIncludesCallback"))
        }
    }
Return

EnumIncludesCallback(Param) {
    SplitPath Param, Filename, FilePath
    LV_Add("", Filename, FilePath)
    Return True ; must return true to continue enumeration
}

IncludesDlgEscape:
IncludesDlgClose:
    Gui IncludesDlg: Destroy
Return

OpenIncludes() {
    Files := []
    Row := 0
    Loop {
        Row := LV_GetNext(Row, "Checked")
        If (!Row) {
            Break
        }

        LV_GetText(Filename, Row, 1)
        LV_GetText(FilePath, Row, 2)
        Files.Push(FilePath . "\" . Filename)
    }

    If (Files.Length()) {
        Open(Files)
    }

    Gui IncludesDlg: Destroy
}

SetSessionsDir() {
    If (g_SessionsDir == "ERROR" || !FileExist(g_SessionsDir)) {
        If (FileExist(A_AppData . "\AutoGUI\Sessions\*.session")) {
            g_SessionsDir := A_AppData . "\AutoGUI\Sessions"
        } Else {
            g_SessionsDir := A_ScriptDir . "\Sessions"
            FileCreateDir %g_SessionsDir%
            If (ErrorLevel) { ; No permission to write in the application folder
                g_SessionsDir := A_AppData . "\AutoGUI\Sessions"
                FileCreateDir %g_SessionsDir%
            }
        }
    }
}

LoadSessionMenu() {
    hMenu := MenuGetHandle("AutoSessionMenu")
    If (hMenu) {
        Loop % GetMenuItemCount(hMenu) {
            Menu AutoSessionMenu, Delete, 1&
        }
    }

    MostRecentFile := ""
    MostRecentDate := 0
    ItemCount := 0
    Loop %g_SessionsDir%\*.session
    {
        SplitPath A_LoopFileName,,,, NameNoExt

        If (A_LoopFileTimeModified > MostRecentDate) {
            MostRecentDate := A_LoopFileTimeModified
            MostRecentFile := NameNoExt
        }

        Menu AutoSessionMenu, Add, %NameNoExt%, M_LoadSession
        ItemCount++
    }

    If (ItemCount > 1) {
        Menu AutoSessionMenu, Delete, %MostRecentFile%
        Menu AutoSessionMenu, Insert, 1&, %MostRecentFile%, M_LoadSession
    }

    If (ItemCount) {
        Menu AutoSessionMenu, Default, %MostRecentFile%
        Menu AutoSessionMenu, Add
    }

    AddMenu("AutoSessionMenu", "Open Sessions Folder", "OpenSessionsFolder", IconLib, 9)
    If (!FileExist(g_SessionsDir . "\*.session")) {
        Menu AutoSessionMenu, Disable, Open Sessions Folder
    }

    Menu AutoFileMenu, Add, Load Session, :AutoSessionMenu
}

M_LoadSession() {
    SessionFile = %g_SessionsDir%\%A_ThisMenuItem%.session
    LoadSession(SessionFile)
}

LoadSession(SessionFile) {
    Files := []
    Active := 1
    If (FileExist(SessionFile)) {
        FileRead Session, %SessionFile%
        Loop Parse, Session, `n, `r
        {
            Fields := StrSplit(A_LoopField, "|")
            If (FileExist(Fields[1])) {
                Files.Push(Fields[1])
            }

            If (Fields[2]) {
                Active := A_Index
            }
        }
    }

    If (Files.Length()) {
        If (Sci[TabEx.GetSel()].GetModify()) {
            Active += TabEx.GetCount()
        } Else {
            Active += TabEx.GetCount() - 1
        }

        Open(Files)
        Sleep -1
        TabEx.SetSel(Active)
        FileSetTime %A_Now%, %SessionFile%
    }
}

LoadLastSession() {
    MostRecentFile := ""
    MostRecentDate := 0
    Loop %g_SessionsDir%\*.session
    {
        If (A_LoopFileTimeModified > MostRecentDate) {
            MostRecentDate := A_LoopFileTimeModified
            MostRecentFile := A_LoopFileLongPath
        }
    }

    LoadSession(MostRecentFile)
}

SaveSessionOnExit:
SaveSession:
    n := TabEx.GetSel()
    Session := ""
    Loop % Sci.Length() {
        Active := n == A_Index ? 1 : 0
        Filename := Sci[A_Index].FullName
        If (FileExist(Filename)) {
            Session .= Filename . "|" . Active . CRLF
        }
    }

    Session := RTrim(Session, CRLF)

    If (A_ThisLabel == "SaveSession") {
        Filename := g_SessionsDir . "\Session Name.session"
        FileSelectFile Filename, S16, %Filename%, Save Session, Session Files (*.session)
        If (ErrorLevel) {
            Return
        }

        SplitPath Filename,,, Ext
        If (!(Ext = "session") && !FileExist(Filename . ".session")) {
            Filename .= ".session"
        }
    } Else {
        Filename := g_SessionsDir . "\Session Saved on Exit.session"
    }

    FileDelete %Filename%
    FileAppend %Session%, %Filename%
    If (ErrorLevel) {
        Gui Auto: +OwnDialogs
        MsgBox 0x10, AutoGUI, Error saving %Filename%
    }
Return

OpenSessionsFolder:
    Run %g_SessionsDir%
Return

OpenNewInstance() {
    Filename := Sci[g_TabIndex].FullName
    Run "%A_AhkPath%" "%A_ScriptFullPath%" /new "%Filename%"
}

Sci_GetIdealSize(ByRef X, ByRef Y, ByRef W, ByRef H) {
    GetClientSize(hAutoWnd, WindowW, WindowH)
    GuiControlGet, ToolBox, Auto: Pos, %hToolBox%
    GuiControlGet, TabCtl, Auto: Pos, %hTab%

    If (g_TabBarPos == 1) { ; Top
        Y := TabCtlY + TabCtlH
        H := WindowH - g_StatusBarH - Y
    } Else {
        Y := g_ToolbarH
        H := WindowH - g_StatusBarH - TabCtlH - Y
    }

    X := (DesignMode) ? ToolBoxW + g_SplitterW : -1
    W := (DesignMode) ? WindowW - ToolBoxW - g_SplitterW : WindowW + 1
}

CreateTabControl:
    GetClientSize(hAutoWnd, WindowW, WindowH)
    If (DesignMode) {
        GuiControlGet, ToolBox, Auto: Pos, %hToolBox%
        SplitterW := (g_TabBarStyle == 1 ? g_SplitterW : g_SplitterW - 2)
        TabX := ToolboxW + SplitterW
        TabW := WindowW - ToolboxW - SplitterW
    } Else {
        TabX := 0
        TabW := WindowW
    }

    Style := "+AltSubmit -Wrap -TabStop +0x2008000" . (g_TabBarStyle == 1 ? " +Theme" : " +Buttons")

    If (g_TabBarPos == 1) {
        Gui Add, Tab2, hWndhTab gTabHandler x%TabX% y%g_ToolbarH% w%TabW% h25 %Style%, Untitled 1
    } Else {
        TabY := WindowH - g_StatusBarH - 25
        Gui Add, Tab2, hWndhTab gTabHandler x%TabX% y%TabY% w%TabW% h25 %Style%, Untitled 1
    }

    SendMessage 0x1329, 0, 0x00180055,, ahk_id %hTab% ; TCM_SETITEMSIZE (0x18 = 24)

    Ptr := A_PtrSize == 8 ? "Ptr" : ""
    Global OldTabProc := DllCall("GetWindowLong" . Ptr, "Ptr", hTab, "Int", -4, "Ptr") ; GWL_WNDPROC
    NewTabProc := RegisterCallback("NewTabProc", "", 4) ;
    DllCall("SetWindowLong" . Ptr, "Ptr", hTab, "Int", -4, "Ptr", NewTabProc, "Ptr")

    TabEx := New GuiTabEx(hTab)
    TabExIL := IL_Create(3)
    IL_Add(TabExIL, IconLib, 3)   ; Unsaved file
    IL_Add(TabExIL, A_AhkPath, 2) ; AHK default icon
    IL_Add(TabExIL, IconLib, 5)   ; GUI icon
    TabEx.SetImageList(TabExIL)
    TabEx.SetIcon(1, 1)
    TabEx.SetPadding(5, 4)

    Gui Tab
Return

; Adapted from AkelPad
NewTabProc(hWnd, msg, wParam, lParam) {
    Static s_MouseMove := 0

    If (msg == 0x201) { ; WM_LBUTTONDOWN
        TabIndex := TabHitTest(hWnd, lParam & 0xFFFF, lParam >> 16)

        If (TabIndex) {
            s_MouseMove := 4
            If (!g_MouseCapture) {
                g_MouseCapture := 1
                DllCall("SetCapture", "Ptr", hWnd)
            }

            If (TabIndex != TabEx.GetSel()) {
                TabEx.SetSel(TabIndex)
            }
        }
        Return True

    } Else If (msg == 0x200) { ; WM_MOUSEMOVE
        If (g_MouseCapture) {
            If (s_MouseMove > 0) {
                If (--s_MouseMove == 0) {
                    DllCall("SetCursor", "Ptr", hCursorDragMove)
                }
            }
            Return True
        }

    } Else If (msg == 0x202) { ; WM_LBUTTONUP
        If (g_MouseCapture) {
            g_MouseCapture := 0
            DllCall("ReleaseCapture")

            If (s_MouseMove == 0) {
                DropItem := TabHitTest(hWnd, lParam & 0xFFFF, lParam >> 16)

                DragItem := TabEx.GetSel()
                If (DropItem && DropItem != DragItem) {
                    SwapTabs(DragItem, DropItem)
                }
            }
            Return True
        }

    } Else If (msg == 0x215) { ; WM_CAPTURECHANGED
        If (g_MouseCapture) {
            g_MouseCapture := 0
            DllCall("ReleaseCapture")
        }

    } Else If (msg == 0x207) { ; WM_MBUTTONDOWN
        CloseTab(TabHitTest(hWnd, lParam & 0xFFFF, lParam >> 16))
        Return True
    }

    Return DllCall("CallWindowProcA", "Ptr", OldTabProc, "Ptr", hWnd, "UInt", msg, "Ptr", wParam, "Ptr", lParam)
}

; nTab := TabHitTest(hTab, lParam & 0xFFFF, lParam >> 16)
TabHitTest(hWnd, x, y) {
    VarSetCapacity(TCHITTESTINFO, 16, 0)
    NumPut(x, TCHITTESTINFO, 0)
    NumPut(y, TCHITTESTINFO, 4)
    NumPut(6, HITTESTINFO, 8) ; 6 = TCHT_ONITEM
    SendMessage 0x130D, 0, &TCHITTESTINFO,, ahk_id %hWnd% ; TCM_HITTEST
    Return Int(ErrorLevel) + 1
}

SwapTabs(DragItem, DropItem) {
    DropItemTitle := TabEx.GetText(DropItem)
    TabEx.SetText(DropItem, TabEx.GetText(Dragitem))
    TabEx.SetText(DragItem, DropItemTitle)

    ShowWindow(Sci[DropItem].hWnd)
    ShowWindow(Sci[DragItem].hWnd, 0)

    Sci_Temp := Sci[DropItem]
    Sci[DropItem] := Sci[DragItem]
    Sci[DragItem] := Sci_Temp

    TabEx.SetSel(DropItem)

    If (g_GuiTab == DropItem) {
        g_GuiTab := DragItem
    } Else If (g_GuiTab == DragItem) {
        g_GuiTab := DropItem
    }

    SetTabIcon(DropItem)
    SetTabIcon(DragItem)
}

SetTabBarPos:
    If (A_ThisMenuItem == "Top") {
        TabCtlY := g_ToolbarH
        g_TabBarPos := 1
        Menu AutoViewTabBarMenu, Uncheck, Bottom
    } Else {
        GetClientSize(hAutoWnd, WindowW, WindowH)
        TabCtlY := WindowH - g_StatusBarH - 25 ; 25 = TabCtlH
        g_TabBarPos := 2
        Menu AutoViewTabBarMenu, Uncheck, Top
    }

    Control ExStyle, ^0x200,, ahk_id %hMainToolbar% ; Toggle WS_EX_CLIENTEDGE
    Control ExStyle, ^0x200,, ahk_id %hGUIToolbar%
    ; 0x37: SWP_NOSIZE | SWP_NOMOVE | SWP_NOZORDER | SWP_NOACTIVATE | SWP_DRAWFRAME
    SetWindowPos(hMainToolbar, 0, 0, 0, 0, 0, 0x37)
    SetWindowPos(hGUIToolbar, 0, 0, 0, 0, 0, 0x37)

    GuiControl MoveDraw, %hTab%, y%TabCtlY%

    Sci_GetIdealSize(SciX, SciY, SciW, SciH)
    Loop % Sci.Length() {
        SetWindowPos(Sci[A_Index].hWnd, SciX, SciY, 0, 0, 0, 0x15) ; SWP_NOSIZE | SWP_NOZORDER | SWP_NOACTIVATE
    }

    Menu AutoViewTabBarMenu, Check, %A_ThisMenuItem%
Return

SetTabBarStyle:
    If (A_ThisMenuItem == "Standard") {
        GuiControl Auto: -Buttons, %hTab%
        DllCall("UxTheme.dll\SetWindowTheme", "Ptr", hTab, "WStr", "Explorer", "Ptr", 0)
        g_TabBarStyle := 1
        Menu AutoViewTabBarMenu, Uncheck, Buttons
    } Else {
        DllCall("UxTheme.dll\SetWindowTheme", "Ptr", hTab, "Str", " ", "Str", " ")
        GuiControl Auto: +Buttons, %hTab%
        g_TabBarStyle := 2
        Menu AutoViewTabBarMenu, Uncheck, Standard
    }

    If (DesignMode) {
        GuiControlGet, TabCtl, Pos, %hTab%
        TabCtlX := A_ThisMenuItem == "Standard" ? TabCtlX + 2 : TabCtlX - 2
        GuiControl MoveDraw, %hTab%, x%TabCtlX%
    }

    Menu AutoViewTabBarMenu, Check, %A_ThisMenuItem%
Return

SetTabIcon(n) {
    TabEx.SetIcon(n, (n == g_GuiTab) ? 3 : (Sci[n].FileName != "" && SubStr(Sci[n].FileName, -2) = "AHK") ? 2 : 1)
}

ShowBackupDialog:
    Gui BackupDlg: New, +LabelBackupDlg +hWndhBackupDlg -MinimizeBox +OwnerAuto
    SetWindowIcon(hBackupDlg, IconLib, 10)

    Gui Color, White
    Gui Add, Radio, x0 y0 w0 h0

    Gui Font, s12 cNavy, Segoe UI
    Gui Add, Text, x11 y12 w297 h23 +0x200, Auto-save and Backup Settings
    Gui Font
    Gui Font, s9, Segoe UI

    Gui Add, Text, x12 y47 w69 h23 +0x200, Directory:
    Gui Add, Edit, vg_BackupDir x84 y48 w287 h21, %g_BackupDir%
    Gui Add, Button, gChooseBackupDir x376 y46 w80 h23, &Browse...

    Gui Add, CheckBox, vg_BackupOnSave x12 y78 w237 h23 +Checked%g_BackupOnSave%, Backup a copy of the file before saving

    Gui Add, GroupBox, x8 y107 w449 h114, Auto-save
    Gui Add, Text, x17 y126 w139 h23 +0x200, Save automatically after
    Gui Add, Edit, vg_AutoSaveInterval x159 y127 w42 h21 +Number +Right, %g_AutoSaveInterval%
    Gui Add, Text, x209 y126 w58 h23 +0x200, minutes
    Gui Add, CheckBox, vg_AutoSaveInLoco x17 y158 w237 h23 +Checked%g_AutoSaveInLoco%, Save the file in its current location
    Gui Add, CheckBox, vg_AutoSaveInBkpDir x17 y190 w237 h23 +Checked%g_AutoSaveInBkpDir%, Save the file in the backup directory

    Gui Add, Text, x12 y228 w183 h23 +0x200, Delete backup copies older than
    Gui Add, Edit, vg_BackupDays x197 y229 w42 h21 +Number +Right, %g_BackupDays%
    Gui Add, Text, x245 y228 w45 h23 +0x200, days

    Gui Add, Text, x-1 y265 w466 h48 -Background +Border
    Gui Add, Button, x281 y277 w84 h24 +Default gBackupDlgOK, &OK
    Gui Add, Button, x372 y277 w84 h24 gBackupDlgClose, &Cancel

    Gui Show, w464 h312, Auto-save and Backup Settings
Return

BackupDlgEscape:
BackupDlgClose:
    Gui BackupDlg: Destroy
Return

BackupDlgOK:
    Gui BackupDlg: Submit

    g_BackupDir := RTrim(g_BackupDir, "\")

    If (g_AutoSaveInterval < 1) {
        g_AutoSaveInterval := 2 ; Default
    }

    DeleteOldBackups()
    If (g_BackupDir == A_Temp . "\AutoGUI") {
        ; For compatibility with old versions
        DeleteOldBackups("tmp")
    }

    ResetAutoSave()
Return

ChooseBackupDir:
    Gui BackupDlg: +OwnDialogs
    FileSelectFolder SelectedFolder,,, Select Folder
    If (!ErrorLevel) {
        GuiControl, BackupDlg:, g_BackupDir, %SelectedFolder%
    }
Return

AutoSaveTimer() {
    Critical

    If (g_AutoSaveInLoco) {
        Loop % Sci.Length() {
            ; Only for files with name
            If (Sci[A_Index].FullName != "" && Sci[A_Index].GetModify()) {
                Save(A_Index)
            }
        }
    }

    If (g_AutoSaveInBkpDir) {
        Loop % Sci.Length() {
            If (Sci[A_Index].FullName != "" && !Sci[A_Index].GetModify()) {
                ; The file has not been modified
                Continue
            }

            ; Generate backup name for named files
            If (Sci[A_Index].FullName != "") {
                If (!InStr(Sci[A_Index].BackupName, "[")) {
                    CRC32 := CRC32(Sci[A_Index].FullName)
                    SplitPath % Sci[A_Index].FullName, Filename
                    Sci[A_Index].BackupName := g_BackupDir . "\" . Filename . " [" . CRC32 . "]" . ".ahk.tmp"
                }
            ; For unnamed files
            } Else If (Sci[A_Index].BackupName == "") {
                Sci[A_Index].BackupName := GetTempFileName(g_BackupDir, "ahk.tmp")
            }

            SciText := GetText(A_Index)
            If (SciText != "") {
                If (BackupDirCreated()) {
                    BackupName := Sci[A_Index].BackupName
                    FileDelete %BackupName%
                    FileAppend %SciText%, %BackupName%
                }
            }
        }
    }

    Critical Off
}

; Credits to jNizM
CRC32(String, Encoding = "UTF-8") {
    Local ChrLength, Length, Data, hMod, CRC32
    ChrLength := (Encoding = "CP1200" || Encoding = "UTF-16") ? 2 : 1
    Length := (StrPut(String, Encoding) - 1) * ChrLength
    VarSetCapacity(Data, Length, 0)
    StrPut(String, &Data, Floor(Length / ChrLength), Encoding)
    hMod := DllCall("Kernel32.dll\LoadLibrary", "Str", "Ntdll.dll", "Ptr")
    CRC32 := DllCall("Ntdll.dll\RtlComputeCrc32", "UInt", 0, "UInt", &Data, "UInt", Length, "UInt")
    DllCall("Kernel32.dll\FreeLibrary", "Ptr", hMod)
    Return Format("{:08X}", CRC32)
}

DeleteOldBackups(Ext := "ahk.tmp") {
    Loop %g_BackupDir%\*.%Ext% {
        Now := A_Now
        EnvSub Now, %A_LoopFileTimeModified%, Days
        If (Now >= g_BackupDays) {
            FileDelete %A_LoopFileLongPath%
        }
    }
}

BackupDirCreated() {
    If (!FileExist(g_BackupDir)) {
        FileCreateDir %g_BackupDir%
        Return !ErrorLevel
    }

    Return True
}

StartAutoSave() {
    If (g_AutoSaveInLoco || g_AutoSaveInBkpDir) {
        SetTimer AutoSaveTimer, % g_AutoSaveInterval * 60000
    }
}

ResetAutoSave() {
    Try {
        SetTimer AutoSaveTimer, Off
    }

    StartAutoSave()
}

CustomMessage(wParam, lParam) {
    If (wParam == 1) { ; Integration with Find in Files
        If (WinExist("ahk_id " . lParam)) {
            ControlGetText Params,, ahk_id %lParam%
            Params := StrSplit(Params, "|")
            If (FileExist(Params[1])) {
                Open([Params[1]])
                Sleep -1

                n := TabEx.GetSel()
                Sci[n].GoToPos(Sci[n].PositionFromLine(Params[2] - 1))
                WinActivate ahk_id %hAutoWnd%
            }
        }
    } Else If (wParam == 2) { ; Request all open file names
        Filenames := ""
        n := TabEx.GetSel()
        If (Sci[n].FullName != "") {
            Filenames .= Sci[n].FullName . ";"
        }

        Loop % Sci.Length() {
            If (A_Index == n) {
                Continue
            }

            If (Sci[A_Index].FullName != "") {
                Filenames .= Sci[A_Index].FullName . ";"                
            }
        }

        GuiControl,, %g_hHiddenEdit%, %Filenames%
        Sleep -1
        SendMessage 10000, 2, %g_hHiddenEdit%,, ahk_id %lParam%
    }
}

#Include %A_ScriptDir%\Lib\CommonDialogs.ahk
#Include %A_ScriptDir%\Lib\GuiButtonIcon.ahk
#Include %A_ScriptDir%\Lib\ExecScript.ahk
#Include %A_ScriptDir%\Lib\EnumIncludes.ahk
#Include %A_ScriptDir%\Lib\DBGp.ahk
#Include %A_ScriptDir%\Lib\LV_GroupView.ahk
#Include %A_ScriptDir%\Tools\MagicBox\Functions\InputBoxEx.ahk
#Include %A_ScriptDir%\Tools\MagicBox\Functions\SoftModalMessageBox.ahk

#Include %A_ScriptDir%\Include\Properties.ahk
#Include %A_ScriptDir%\Include\Editor.ahk
#Include %A_ScriptDir%\Include\FontDialog.ahk
#Include %A_ScriptDir%\Include\StylesDlg.ahk
#Include %A_ScriptDir%\Include\MenuEditor.ahk
#Include %A_ScriptDir%\Include\ToolbarEditor.ahk
#Include %A_ScriptDir%\Include\CloneWindow.ahk
#Include %A_ScriptDir%\Include\Resizers.ahk
#Include %A_ScriptDir%\Include\Settings.ahk
#Include %A_ScriptDir%\Include\Parser.ahk
#Include %A_ScriptDir%\Include\ContextHelp.ahk
#Include %A_ScriptDir%\Include\GenerateCode.ahk
#Include %A_ScriptDir%\Include\FindReplace.ahk
#Include %A_ScriptDir%\Include\ToolsDialog.ahk
#Include %A_ScriptDir%\Include\Debug.ahk
